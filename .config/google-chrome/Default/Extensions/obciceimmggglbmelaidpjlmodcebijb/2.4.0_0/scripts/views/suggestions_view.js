// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.SuggestionsView = (function(_super) {

    __extends(SuggestionsView, _super);

    function SuggestionsView() {
      return SuggestionsView.__super__.constructor.apply(this, arguments);
    }

    SuggestionsView.prototype.template = BH.Templates['suggestions'];

    SuggestionsView.prototype.className = 'suggestions suggestions_view';

    SuggestionsView.prototype.events = {
      'click li': 'onTagClicked'
    };

    SuggestionsView.prototype.initialize = function() {
      return this.disqualifiedTags = this.options.disqualifiedTags || [];
    };

    SuggestionsView.prototype.render = function() {
      var html, tags;
      tags = _.difference(this.collection.pluck('name'), this.disqualifiedTags);
      html = Mustache.to_html(this.template, {
        tags: tags
      });
      this.$el.hide();
      this.$el.html(html);
      return this;
    };

    SuggestionsView.prototype.onTagClicked = function(ev) {
      return this.trigger('click:tag', $(ev.currentTarget).data('tag'));
    };

    SuggestionsView.prototype.show = function() {
      return this.$el.show();
    };

    SuggestionsView.prototype.hide = function() {
      return this.$el.hide();
    };

    SuggestionsView.prototype.moveDown = function() {
      var $activeTags, $selected, index;
      $activeTags = this.$('li.active');
      $selected = this.$('.selected');
      if ($selected.length > 0) {
        index = $activeTags.indexOf($selected[0]) + 1;
        if (index !== $activeTags.length) {
          $selected.removeClass('selected');
          $selected = $activeTags.eq(index);
          return $selected.addClass('selected');
        }
      } else {
        $selected = $activeTags.eq(0);
        return $selected.addClass('selected');
      }
    };

    SuggestionsView.prototype.moveUp = function() {
      var $activeTags, $selected, index;
      $activeTags = this.$('li.active');
      $selected = this.$('.selected');
      if ($selected.length > 0) {
        index = $activeTags.indexOf($selected[0]);
        if (index !== 0) {
          $selected.removeClass('selected');
          $selected = $activeTags.eq(index - 1);
          return $selected.addClass('selected');
        }
      }
    };

    SuggestionsView.prototype.selectedTag = function() {
      var $selected;
      $selected = this.$('.selected');
      return $selected.data('tag');
    };

    SuggestionsView.prototype.filterBy = function(text) {
      var hiddenTags;
      hiddenTags = _.intersection(this.disqualifiedTags, this.collection.pluck('name')).length;
      this.$('li').each(function() {
        if ($(this).data('tag').match(text)) {
          return $(this).addClass('active');
        } else {
          hiddenTags += 1;
          return $(this).removeClass('active');
        }
      });
      if (hiddenTags === this.collection.length) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    SuggestionsView.prototype.disqualifyTag = function(tag) {
      this.disqualifiedTags.push(tag);
      return this.render();
    };

    SuggestionsView.prototype.requalifyTag = function(tag) {
      this.disqualifiedTags = _.without(this.disqualifiedTags, tag);
      return this.render();
    };

    return SuggestionsView;

  })(Backbone.View);

}).call(this);
