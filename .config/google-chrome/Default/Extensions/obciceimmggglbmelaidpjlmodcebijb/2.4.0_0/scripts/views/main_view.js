// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      return MainView.__super__.constructor.apply(this, arguments);
    }

    MainView.prototype.select = function() {
      var cleanTitle, element,
        _this = this;
      $('.mainview > *').removeClass('selected');
      $('.mainview > *').css({
        display: 'block'
      });
      setTimeout(function() {
        _this.$el.addClass('selected');
        return $('.mainview > *:not(.selected)').css({
          display: 'none'
        });
      }, 0);
      if (this.pageTitle) {
        element = $('<div/>');
        cleanTitle = $(element).html(this.pageTitle()).text();
        document.title = "" + cleanTitle + " - Better History";
      }
      this.trigger('selected');
      return this;
    };

    MainView.prototype.onSearchTyped = function(ev) {
      var term;
      term = this.trimedSearchTerm();
      if (ev.keyCode === 13 && term !== '') {
        return router.navigate('search/' + term, true);
      }
    };

    MainView.prototype.onSearchBlurred = function() {
      return this.$('.search').val(this.trimedSearchTerm());
    };

    MainView.prototype.trimedSearchTerm = function() {
      return $.trim(this.$('.search').val());
    };

    MainView.prototype.assignTabIndices = function(selector) {
      $('*').removeAttr('tabindex');
      this.$('input.search').attr('tabindex', 1);
      this.$(selector).each(function(i) {
        return $(this).attr('tabindex', i + 2);
      });
      return this.$('.search').focus();
    };

    return MainView;

  })(Backbone.View);

}).call(this);
