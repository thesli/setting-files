// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.ActiveTagsView = (function(_super) {

    __extends(ActiveTagsView, _super);

    function ActiveTagsView() {
      return ActiveTagsView.__super__.constructor.apply(this, arguments);
    }

    ActiveTagsView.include(BH.Modules.I18n);

    ActiveTagsView.prototype.template = BH.Templates['active_tags'];

    ActiveTagsView.prototype.className = 'active_tags_view';

    ActiveTagsView.prototype.events = {
      'click .delete': 'deleteTagClicked',
      'click .tag': 'tagClicked'
    };

    ActiveTagsView.prototype.initialize = function() {
      this.chromeAPI = chrome;
      this.tracker = this.options.tracker;
      this.editable = this.options.editable || false;
      return this.inBrowserAction = this.options.inBrowserAction || false;
    };

    ActiveTagsView.prototype.render = function() {
      var html, properties;
      properties = {
        tags: this.model.tags(),
        editable: this.editable
      };
      html = Mustache.to_html(this.template, properties);
      this.$el.html(html);
      return this;
    };

    ActiveTagsView.prototype.deleteTagClicked = function(ev) {
      var tag;
      ev.preventDefault();
      tag = $(ev.currentTarget).data('tag');
      this.model.removeTag(tag);
      return this.tracker.siteUntagged();
    };

    ActiveTagsView.prototype.tagClicked = function(ev) {
      var tag;
      if (this.inBrowserAction != null) {
        ev.preventDefault();
        tag = $(ev.currentTarget).data('tag');
        return this.chromeAPI.tabs.create({
          url: "chrome://history#tags/" + tag
        });
      }
    };

    return ActiveTagsView;

  })(BH.Views.MainView);

}).call(this);
