// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.SettingsView = (function(_super) {

    __extends(SettingsView, _super);

    function SettingsView() {
      return SettingsView.__super__.constructor.apply(this, arguments);
    }

    SettingsView.include(BH.Modules.I18n);

    SettingsView.prototype.className = 'settings_view';

    SettingsView.prototype.template = BH.Templates['settings'];

    SettingsView.prototype.events = {
      'click .clear_history': 'clickedClearHistory',
      'click .credits': 'clickedCredits',
      'click #sign_up': 'clickedSignUp',
      'click #sign_in': 'clickedSignIn',
      'change #time_grouping': 'changedTimeGrouping',
      'change #time_format': 'changedTimeFormat',
      'change #open_location': 'changedOpenLocation',
      'change #starting_week_day': 'changedStartingWeekDay',
      'change #week_day_order': 'changedWeekDayOrder',
      'click #domain_grouping': 'clickedDomainGrouping',
      'click #search_by_domain': 'clickedSearchByDomain',
      'click #search_by_selection': 'clickedSearchBySelection',
      'click .manually_sync_local': 'clickedManuallySyncLocal',
      'click .logout': 'clickedLogout'
    };

    SettingsView.prototype.initialize = function() {
      var _this = this;
      this.chromeAPI = chrome;
      this.tracker = analyticsTracker;
      this.model.off('change');
      this.model.on('change', (function() {
        return _this.model.save();
      }), this.model);
      this.model.on('change:openLocation', this.options.state.updateRoute, this.options.state);
      this.model.on('change:startingWeekDay', this.options.state.updateRoute, this.options.state);
      window.user.on('login', this.onUserLogIn, this);
      window.user.on('logout', this.onUserLogout, this);
      return this.on('selected', this.activateSocialLinks, this);
    };

    SettingsView.prototype.pageTitle = function() {
      return this.t('settings_title');
    };

    SettingsView.prototype.onUserLogIn = function() {
      this.$('.logged_out').hide();
      this.$('.avatar').attr('src', user.get('avatar'));
      this.$('.name').text("" + (user.get('firstName')) + " " + (user.get('lastName')));
      this.$('.logged_in').show();
      return this.$('.login_spinner').hide();
    };

    SettingsView.prototype.onUserLogout = function() {
      this.$('.logged_out').show();
      this.$('.logged_in').hide();
      return this.$('.login_spinner').hide();
    };

    SettingsView.prototype.clickedLogout = function(ev) {
      ev.preventDefault();
      return user.logout();
    };

    SettingsView.prototype.clickedManuallySyncLocal = function(ev) {
      var initialSyncingModal,
        _this = this;
      ev.preventDefault();
      initialSyncingModal = new BH.Modals.InitialSyncingModal();
      initialSyncingModal.open();
      return initialSyncingModal.on('open', function() {
        return persistence.remote().deleteSites(function() {
          return persistence.tag().fetchTags(function(tags, compiledTags) {
            var syncingTranslator;
            if (tags.length === 0) {
              return initialSyncingModal.doneSyncing();
            } else {
              syncingTranslator = new BH.Lib.SyncingTranslator();
              return syncingTranslator.forServer(compiledTags, function(sites) {
                return persistence.remote().updateSites(sites, function() {
                  return setTimeout(function() {
                    return initialSyncingModal.doneSyncing();
                  }, 2000);
                });
              });
            }
          });
        });
      });
    };

    SettingsView.prototype.activateSocialLinks = function() {
      !(function(d, s, id) {
        js;
        var fjs, js;
        fjs = d.getElementsByTagName(s)[0];
        if (!d.getElementById(id)) {
          js = d.createElement(s);
          js.id = id;
          js.src = "https://platform.twitter.com/widgets.js";
          return fjs.parentNode.insertBefore(js, fjs);
        }
      })(document, "script", "twitter-wjs");
      window.___gcfg = {
        lang: this.t('google_plus_language')
      };
      return (function() {
        var po, s;
        po = document.createElement('script');
        po.type = 'text/javascript';
        po.async = true;
        po.src = 'https://apis.google.com/js/plusone.js';
        s = document.getElementsByTagName('script')[0];
        return s.parentNode.insertBefore(po, s);
      })();
    };

    SettingsView.prototype.render = function() {
      var html, presenter, properties,
        _this = this;
      presenter = new BH.Presenters.SettingsPresenter(this.model);
      properties = _.extend({}, this.getI18nValues(), presenter.settings());
      html = Mustache.to_html(this.template, properties);
      this.$el.append(html);
      this.populateFields();
      setTimeout(function() {
        if (user.get('authId')) {
          return _this.onUserLogIn();
        }
      }, 500);
      return this;
    };

    SettingsView.prototype.populateFields = function() {
      this.$('#open_location').val(this.model.get('openLocation'));
      this.$('#starting_week_day').val(this.model.get('startingWeekDay'));
      this.$('#week_day_order').val(this.model.get('weekDayOrder'));
      this.$('#time_grouping').val(this.model.get('timeGrouping'));
      this.$('#time_format').val(this.model.get('timeFormat'));
      this.$('#domain_grouping').prop('checked', this.model.get('domainGrouping'));
      this.$('#search_by_domain').prop('checked', this.model.get('searchByDomain'));
      return this.$('#search_by_selection').prop('checked', this.model.get('searchBySelection'));
    };

    SettingsView.prototype.clickedSignUp = function(ev) {
      var signUpInfoModal;
      ev.preventDefault();
      signUpInfoModal = new BH.Modals.SignUpInfoModal();
      return signUpInfoModal.open();
    };

    SettingsView.prototype.clickedSignIn = function(ev) {
      var userProcessor;
      ev.preventDefault();
      this.$('.login_spinner').show();
      userProcessor = new BH.Lib.UserProcessor();
      return userProcessor.start();
    };

    SettingsView.prototype.changedTimeGrouping = function(ev) {
      return this.model.set({
        timeGrouping: $(ev.currentTarget).val()
      });
    };

    SettingsView.prototype.changedTimeFormat = function(ev) {
      return this.model.set({
        timeFormat: $(ev.currentTarget).val()
      });
    };

    SettingsView.prototype.changedOpenLocation = function(ev) {
      return this.model.set({
        openLocation: $(ev.currentTarget).val()
      });
    };

    SettingsView.prototype.changedStartingWeekDay = function(ev) {
      return this.model.set({
        startingWeekDay: $(ev.currentTarget).val()
      });
    };

    SettingsView.prototype.changedWeekDayOrder = function(ev) {
      return this.model.set({
        weekDayOrder: $(ev.currentTarget).val()
      });
    };

    SettingsView.prototype.clickedDomainGrouping = function(ev) {
      return this.model.set({
        domainGrouping: $(ev.currentTarget).is(':checked')
      });
    };

    SettingsView.prototype.clickedSearchByDomain = function(ev) {
      var backgroundPage, method;
      this.model.set({
        searchByDomain: $(ev.currentTarget).is(':checked')
      });
      backgroundPage = this.chromeAPI.extension.getBackgroundPage();
      method = this.model.get('searchByDomain') ? 'create' : 'remove';
      return backgroundPage.pageContextMenu[method]();
    };

    SettingsView.prototype.clickedSearchBySelection = function(ev) {
      var backgroundPage, method;
      this.model.set({
        searchBySelection: $(ev.currentTarget).prop('checked')
      });
      backgroundPage = this.chromeAPI.extension.getBackgroundPage();
      method = this.model.get('searchBySelection') ? 'create' : 'remove';
      return backgroundPage.selectionContextMenu[method]();
    };

    SettingsView.prototype.clickedClearHistory = function(ev) {
      ev.preventDefault();
      return this.chromeAPI.tabs.create({
        url: 'chrome://settings/clearBrowserData'
      });
    };

    SettingsView.prototype.clickedCredits = function(ev) {
      var creditsModal;
      ev.preventDefault();
      creditsModal = new BH.Modals.CreditsModal();
      $('body').append(creditsModal.render().el);
      return creditsModal.open();
    };

    SettingsView.prototype.getI18nValues = function() {
      var properties;
      properties = this.t(['settings_title', 'clearing_history_section_title', 'clear_history_button', 'visit_grouping_section_title', 'group_visits_by_label', 'time_format_label', 'group_visits_by_domain_label', 'right_click_options_section_title', 'search_by_text_selection_label', 'search_by_domain_label', 'whats_new_section_title', 'feedback_section_title', 'spread_the_word_section_title', 'leave_a_review', 'twitter_template', 'twitter_language', 'open_location', 'starting_week_day', 'week_day_order', 'general_section_title', 'mailing_list_link', 'syncing_settings_title', 'manually_sync_local_link']);
      properties['i18n_syncing_settings_login'] = this.t('syncing_settings_login', ['<a style="text-decoration: underline;" href="#" id="sign_up">', '</a>', '<a style="text-decoration: underline;" href="#" id="sign_in">', '</a>']);
      properties['i18n_credits_link'] = this.t('credits_link', ['<strong>', '</strong>']);
      properties['i18n_permissions_details'] = this.t('permissions_details', ['<a href="http://www.better-history.com/permissions">', '</a>']);
      properties['i18n_suggestions_bugs_comments'] = this.t('suggestions_bugs_comments', ['<a href="http://twitter.com/Better_History">', '</a>']);
      return properties;
    };

    return SettingsView;

  })(BH.Views.MainView);

}).call(this);
