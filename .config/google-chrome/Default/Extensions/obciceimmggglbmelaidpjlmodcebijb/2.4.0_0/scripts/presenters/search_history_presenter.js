// Generated by CoffeeScript 1.6.1
(function() {
  var wrapMatchInProperty,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Presenters.SearchHistoryPresenter = (function(_super) {

    __extends(SearchHistoryPresenter, _super);

    function SearchHistoryPresenter(visits, query) {
      this.visits = visits;
      this.query = query;
    }

    SearchHistoryPresenter.prototype.history = function(start, end) {
      var i, out, _i;
      out = [];
      if ((start != null) && (end != null)) {
        for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
          if (this.visits[i] != null) {
            out.push(this.markMatches(this.visits[i]));
          }
        }
      }
      return out;
    };

    SearchHistoryPresenter.prototype.markMatches = function(visit) {
      var regExp, term, _i, _len, _ref;
      _ref = this.query.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        term = _ref[_i];
        regExp = new RegExp(term, "i");
        visit.name = wrapMatchInProperty(regExp, visit.name);
        visit.location = wrapMatchInProperty(regExp, visit.location);
        visit.time = wrapMatchInProperty(regExp, visit.time);
        visit.extendedDate = wrapMatchInProperty(regExp, visit.extendedDate);
      }
      return visit;
    };

    return SearchHistoryPresenter;

  })(BH.Presenters.Base);

  wrapMatchInProperty = function(regExp, property) {
    var match;
    if (!property) {
      return;
    }
    match = property.match(regExp);
    if (match) {
      return property.replace(regExp, '<span class="match">' + match + '</span>');
    } else {
      return property;
    }
  };

}).call(this);
