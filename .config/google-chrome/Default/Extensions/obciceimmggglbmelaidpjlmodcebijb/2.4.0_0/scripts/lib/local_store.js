//@ sourceMappingURL=local_store.map
// Generated by CoffeeScript 1.6.1
(function() {

  BH.Lib.LocalStore = (function() {

    function LocalStore(options) {
      if (options == null) {
        options = {};
      }
      if (options.chrome == null) {
        throw "Chrome API not set";
      }
      if (options.tracker == null) {
        throw "Tracker not set";
      }
      this.chromeAPI = options.chrome;
      this.tracker = options.tracker;
    }

    LocalStore.prototype.set = function(object, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.chromeAPI.storage.local.set(object, function(data) {
        return _this.wrappedCallback('Set', data, callback);
      });
    };

    LocalStore.prototype.remove = function(key, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.chromeAPI.storage.local.remove(key, function(data) {
        return _this.wrappedCallback('Remove', data, callback);
      });
    };

    LocalStore.prototype.clear = function() {
      return this.chromeAPI.storage.local.clear();
    };

    LocalStore.prototype.get = function(key, callback) {
      var _this = this;
      return this.chromeAPI.storage.local.get(key, function(data) {
        return _this.wrappedCallback('Get', data, callback);
      });
    };

    LocalStore.prototype.wrappedCallback = function(operation, data, callback) {
      var message, _ref;
      if (this.chromeAPI.runtime.lastError != null) {
        message = (_ref = this.chromeAPI.runtime.lastError) != null ? _ref.message : void 0;
        this.tracker.localStorageError(operation, message);
      }
      return callback(data);
    };

    return LocalStore;

  })();

}).call(this);
