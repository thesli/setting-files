//@ sourceMappingURL=history_query.map
// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Lib.HistoryQuery = (function(_super) {

    __extends(HistoryQuery, _super);

    HistoryQuery.include(BH.Modules.Worker);

    HistoryQuery.include(BH.Modules.I18n);

    function HistoryQuery() {
      this.chromeAPI = chrome;
    }

    HistoryQuery.prototype.run = function(options, callback) {
      var _this = this;
      this.options = options;
      if (this.options.text) {
        this.text = this.options.text;
        this.options.text = '';
      }
      options = {};
      _.extend(options, this.options);
      if (this.options.searching != null) {
        _.extend(options, this.searchOptions);
      } else {
        if (options.maxResults == null) {
          options.maxResults = 5000;
        }
      }
      delete options.searching;
      return this.chromeAPI.history.search(options, function(results) {
        return _this.searchHandler(results, callback);
      });
    };

    HistoryQuery.prototype.searchHandler = function(results, callback) {
      if (this.text) {
        this.options.text = this.text;
      }
      results = this._prepareResults(results);
      return this._sanitizeResults(results, callback);
    };

    HistoryQuery.prototype._sanitizeResults = function(results, callback) {
      var options;
      options = {
        options: this.options,
        results: results
      };
      return this.worker('sanitizer', options, callback);
    };

    HistoryQuery.prototype._prepareResults = function(results) {
      var _this = this;
      _(results).each(function(result) {
        result.date = new Date(result.lastVisitTime);
        result.extendedDate = moment(result.date).format(_this.t('extended_formal_date'));
        return result.time = moment(result.date).format(_this.t('local_time'));
      });
      return results;
    };

    HistoryQuery.prototype.searchOptions = {
      startTime: 0,
      maxResults: 0
    };

    return HistoryQuery;

  })(BH.Base);

}).call(this);
