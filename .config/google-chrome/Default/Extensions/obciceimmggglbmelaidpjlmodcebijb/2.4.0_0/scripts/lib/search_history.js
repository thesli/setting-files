// Generated by CoffeeScript 1.6.1
(function() {
  var fillInVisit, getDomain, parse;

  BH.Lib.SearchHistory = (function() {

    function SearchHistory(query) {
      this.query = query;
      this.history = new BH.Chrome.History();
      this.worker = BH.Modules.Worker.worker;
    }

    SearchHistory.prototype.fetch = function(callback) {
      var options,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      options = {
        text: '',
        startTime: 0,
        maxResults: 0
      };
      return chrome.storage.local.get('lastSearchCache', function(data) {
        var cache;
        cache = data.lastSearchCache;
        if ((cache != null ? cache.query : void 0) === _this.query) {
          return callback(cache.results, new Date(cache.datetime));
        } else {
          return _this.history.query(options, function(history) {
            options = {
              options: {
                text: _this.query
              },
              results: history
            };
            return _this.worker('searchSanitizer', options, function(results) {
              chrome.storage.local.set({
                lastSearchCache: {
                  results: results,
                  datetime: new Date().getTime(),
                  query: _this.query
                }
              });
              return callback(parse(results));
            });
          });
        }
      });
    };

    SearchHistory.prototype.expireCache = function() {
      return chrome.storage.local.remove('lastSearchCache');
    };

    SearchHistory.prototype.deleteUrl = function(url, callback) {
      var _this = this;
      this.history.deleteUrl(url, function() {
        return callback();
      });
      return chrome.storage.local.get('lastSearchCache', function(data) {
        var results;
        results = data.lastSearchCache.results;
        data.lastSearchCache.results = _.reject(results, function(visit) {
          return visit.url === url;
        });
        return chrome.storage.local.set(data);
      });
    };

    SearchHistory.prototype.destroy = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.fetch(function(history) {
        var i, visit, _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = history.length; _i < _len; i = ++_i) {
          visit = history[i];
          _results.push(_this.history.deleteUrl(visit.url, function() {
            if (i === history.length) {
              _this.expireCache();
              return callback();
            }
          }));
        }
        return _results;
      });
    };

    return SearchHistory;

  })();

  parse = function(visits) {
    var i, visit, _i, _len, _results;
    _results = [];
    for (i = _i = 0, _len = visits.length; _i < _len; i = ++_i) {
      visit = visits[i];
      _results.push(fillInVisit(visit));
    }
    return _results;
  };

  fillInVisit = function(visit) {
    visit.host = getDomain(visit.url);
    visit.location = visit.url;
    visit.path = visit.url.replace(visit.domain, '');
    if (visit.title === '') {
      visit.title = '(No Title)';
    }
    visit.name = visit.title;
    return visit;
  };

  getDomain = function(url) {
    var match;
    match = url.match(/\w+:\/\/(.*?)\//);
    if (match === null) {
      return null;
    } else {
      return match[0];
    }
  };

}).call(this);
