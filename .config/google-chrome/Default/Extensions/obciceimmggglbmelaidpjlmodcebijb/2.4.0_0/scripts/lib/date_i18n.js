// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Lib.DateI18n = (function(_super) {

    __extends(DateI18n, _super);

    DateI18n.include(BH.Modules.I18n);

    function DateI18n() {
      this.moment = moment;
      this.chromeAPI = chrome;
    }

    DateI18n.prototype.configure = function() {
      var _this = this;
      this.moment.lang(this.t('chrome_language'), {
        months: [this.t('january'), this.t('february'), this.t('march'), this.t('april'), this.t('may'), this.t('june'), this.t('july'), this.t('august'), this.t('september'), this.t('october'), this.t('november'), this.t('december')],
        weekdays: [this.t('sunday'), this.t('monday'), this.t('tuesday'), this.t('wednesday'), this.t('thursday'), this.t('friday'), this.t('saturday')],
        longDateFormat: {
          LT: this.t('local_time'),
          L: this.t('short_date'),
          LL: this.t('short_date_with_day'),
          LLL: this.t('formal_date')
        },
        meridiem: function(hour, minute, isLower) {
          if (hour < 12) {
            return _this.t('morning');
          } else if (hour >= 12 && hour < 16) {
            return _this.t('afternoon');
          } else if (hour >= 16) {
            return _this.t('evening');
          }
        },
        ordinal: function(number) {
          return _this.t("ordinal_" + number);
        }
      });
      return this.moment.lang(this.t('chrome_language'));
    };

    return DateI18n;

  })(BH.Base);

}).call(this);
