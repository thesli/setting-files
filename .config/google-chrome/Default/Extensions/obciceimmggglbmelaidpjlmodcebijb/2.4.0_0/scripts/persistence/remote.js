// Generated by CoffeeScript 1.6.1
(function() {
  var error;

  error = function(data, type) {
    return tagState.set({
      readOnly: true
    });
  };

  BH.Persistence.Remote = (function() {

    function Remote(authId, ajax) {
      this.authId = authId;
      this.ajax = ajax;
    }

    Remote.prototype.host = function() {
      return "http://" + apiHost;
    };

    Remote.prototype.updateAuthId = function(authId) {
      return this.authId = authId;
    };

    Remote.prototype.performRequest = function(options) {
      var config,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (!navigator.onLine) {
        return error();
      }
      if (!options.disableSyncingFeedback) {
        tagState.set({
          syncing: true
        });
      }
      config = {
        url: this.host() + options.path,
        type: options.type,
        contentType: 'application/json',
        dataType: options.dataType || 'text',
        error: function(data, type) {
          if (data.status === 403) {
            user.logout();
            return chrome.identity.getAuthToken(function(token) {
              return chrome.identity.removeCachedAuthToken({
                token: token
              }, function() {
                var authErrorModal;
                authErrorModal = new BH.Modals.AuthErrorModal();
                return authErrorModal.open();
              });
            });
          } else {
            error(data, type);
            if (options.error != null) {
              return options.error(data, type);
            }
          }
        },
        success: function(data) {
          tagState.set({
            readOnly: false
          });
          if (options.success != null) {
            return options.success(data);
          }
        },
        complete: function() {
          setTimeout(function() {
            return tagState.set({
              syncing: false
            });
          }, 1000);
          if (options.complete != null) {
            return options.complete();
          }
        }
      };
      if (options.authorization) {
        config.headers = {
          authorization: this.authId
        };
      }
      if (options.data != null) {
        config.data = JSON.stringify(options.data);
      }
      return this.ajax(config);
    };

    Remote.prototype.sitesHash = function(callback) {
      return this.performRequest({
        path: '/user/sites/hash',
        type: 'GET',
        dataType: 'json',
        authorization: true,
        disableSyncingFeedback: true,
        success: callback
      });
    };

    Remote.prototype.share = function(tagData, callbacks) {
      var params;
      params = {
        path: '/share',
        data: tagData,
        type: 'POST',
        dataType: 'json',
        success: callbacks.success,
        error: callbacks.error,
        disableSyncingFeedback: true,
        authorization: false
      };
      if (user.isLoggedIn()) {
        params.path = '/user/share';
        params.authorization = true;
      }
      return this.performRequest(params);
    };

    Remote.prototype.updateSite = function(site) {
      return this.performRequest({
        path: '/user/site',
        type: 'POST',
        data: site,
        authorization: true
      });
    };

    Remote.prototype.updateSites = function(sites, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.performRequest({
        path: '/user/sites',
        type: 'POST',
        data: sites,
        success: callback,
        authorization: true
      });
    };

    Remote.prototype.getSites = function(callback) {
      return this.performRequest({
        path: '/user/sites',
        type: 'GET',
        dataType: 'json',
        success: callback,
        authorization: true
      });
    };

    Remote.prototype.renameTag = function(oldName, newName) {
      return this.performRequest({
        path: "/user/tags/" + (oldName.replace(/\s+/g, '-')) + "/rename",
        type: 'PUT',
        data: {
          name: newName
        },
        authorization: true
      });
    };

    Remote.prototype.deleteTag = function(name) {
      return this.performRequest({
        path: "/user/tags/" + (name.replace(/\s+/g, '-')),
        type: 'DELETE',
        authorization: true
      });
    };

    Remote.prototype.deleteSites = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.performRequest({
        path: '/user/sites',
        type: 'DELETE',
        success: callback,
        authorization: true
      });
    };

    return Remote;

  })();

}).call(this);
