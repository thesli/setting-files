//@ sourceMappingURL=sync.map
// Generated by CoffeeScript 1.6.1
(function() {
  var error;

  error = function(data, type) {
    return alert('There was a problem syncing your tags. Please try again later');
  };

  BH.Persistence.Sync = (function() {

    function Sync(authId, ajax, state) {
      this.authId = authId;
      this.ajax = ajax;
      this.state = state;
    }

    Sync.prototype.host = function() {
      return "http://" + apiHost;
    };

    Sync.prototype.performRequest = function(options) {
      var config,
        _this = this;
      if (options == null) {
        options = {};
      }
      this.state.set({
        syncing: true
      });
      config = {
        url: this.host() + options.path,
        type: options.type,
        contentType: 'application/json',
        dataType: options.dataType || 'text',
        headers: {
          authorization: this.authId
        },
        error: function(data, type) {
          error(data, type);
          if (options.error != null) {
            return options.error(data, type);
          }
        },
        success: function(data) {
          if (options.success != null) {
            return options.success(data);
          }
        },
        complete: function() {
          setTimeout(function() {
            return _this.state.set({
              syncing: false
            });
          }, 1000);
          if (options.complete != null) {
            return options.complete();
          }
        }
      };
      if (options.data != null) {
        config.data = JSON.stringify(options.data);
      }
      return this.ajax(config);
    };

    Sync.prototype.share = function(tagData, callbacks) {
      return this.performRequest({
        url: '/share',
        data: tagData,
        type: 'POST',
        dataType: 'json',
        success: callbacks.error,
        error: callbacks.error
      });
    };

    Sync.prototype.updateSite = function(site) {
      return this.performRequest({
        path: '/user/site',
        type: 'POST',
        data: site
      });
    };

    Sync.prototype.updateSites = function(sites, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.performRequest({
        path: '/user/sites',
        type: 'POST',
        data: sites,
        success: callback
      });
    };

    Sync.prototype.getSites = function(callback) {
      return this.performRequest({
        path: '/user/sites',
        type: 'GET',
        dataType: 'json',
        success: callback
      });
    };

    Sync.prototype.renameTag = function(oldName, newName) {
      return this.performRequest({
        path: "/user/tags/" + oldName + "/rename",
        type: 'PUT',
        data: {
          name: newName
        }
      });
    };

    Sync.prototype.deleteTag = function(name) {
      return this.performRequest({
        path: "/user/tags/" + name,
        type: 'DELETE'
      });
    };

    Sync.prototype.deleteSites = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.performRequest({
        path: '/user/sites',
        type: 'DELETE',
        success: callback
      });
    };

    return Sync;

  })();

}).call(this);
