// Generated by CoffeeScript 1.6.1
(function() {
  var analyticsTracker, errorTracker, load;

  window.apiHost = 'api.better-history.com';

  window.siteHost = 'www.better-history.com';

  window.env = 'prod';

  if (env === 'prod') {
    errorTracker = new BH.Trackers.ErrorTracker(Honeybadger);
  }

  analyticsTracker = new BH.Trackers.AnalyticsTracker();

  load = function() {
    var settings,
      _this = this;
    window.syncStore = new BH.Chrome.SyncStore({
      chrome: chrome,
      tracker: analyticsTracker
    });
    window.user = new BH.Models.User({});
    window.user.fetch();
    window.user.on('change', function() {
      if (this.get('authId')) {
        return this.trigger('login');
      }
    });
    window.user.on('login', function() {
      var syncer;
      syncer = new BH.Lib.Syncer();
      return syncer.updateIfNeeded();
    });
    window.tagState = new Backbone.Model({
      readOnly: false,
      syncing: false
    });
    settings = new BH.Models.Settings({});
    window.state = new BH.Models.State({}, {
      settings: settings
    });
    window.persistence = new BH.Init.Persistence({
      localStore: new BH.Chrome.LocalStore({
        chrome: chrome,
        tracker: analyticsTracker
      }),
      syncStore: new BH.Chrome.SyncStore({
        chrome: chrome,
        tracker: analyticsTracker
      }),
      ajax: $.ajax,
      state: state
    });
    return chrome.tabs.query({
      currentWindow: true,
      active: true
    }, function(tabs) {
      var attrs, site, tab, tagFeature, taggingView, tags;
      tab = tabs[0] || {};
      attrs = {
        title: tab.title,
        url: tab.url
      };
      site = new BH.Models.Site(attrs);
      tags = new BH.Collections.Tags([]);
      taggingView = new BH.Views.TaggingView({
        el: $('.app'),
        model: site,
        collection: tags,
        tracker: analyticsTracker
      });
      taggingView.render();
      if (!tagState.get('readOnly')) {
        site.fetch();
      }
      tagFeature = new BH.Init.TagFeature({
        syncStore: syncStore
      });
      return tagFeature.announce(function() {
        return $('body').addClass('new_tags');
      });
    });
  };

  if (env === 'prod') {
    try {
      load();
    } catch (e) {
      errorTracker.report(e);
    }
  } else {
    load();
  }

}).call(this);
