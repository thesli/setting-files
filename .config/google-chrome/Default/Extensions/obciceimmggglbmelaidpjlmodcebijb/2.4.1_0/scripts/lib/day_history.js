// Generated by CoffeeScript 1.6.1
(function() {
  var fillInGroupedVisit, fillInVisit, getDomain, parse;

  BH.Lib.DayHistory = (function() {

    function DayHistory(date) {
      date.setHours(0, 0, 0, 0);
      this.startTime = date.getTime();
      date.setHours(23, 59, 59, 999);
      this.endTime = date.getTime();
      this.history = new BH.Chrome.History();
      this.worker = BH.Modules.Worker.worker;
    }

    DayHistory.prototype.fetch = function(callback) {
      var options,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      options = {
        startTime: this.startTime,
        endTime: this.endTime,
        text: '',
        maxResults: 5000
      };
      return this.history.query(options, function(results) {
        options = {
          options: options,
          results: results
        };
        return _this.worker('rangeSanitizer', options, function(sanitizedResults) {
          options = {
            visits: sanitizedResults,
            interval: settings.get('timeGrouping')
          };
          return _this.worker('timeGrouper', options, function(history) {
            if (settings.get('domainGrouping')) {
              options = {
                intervals: history
              };
              return _this.worker('domainGrouper', options, function(history) {
                return callback(parse(history));
              });
            } else {
              return callback(parse(history));
            }
          });
        });
      });
    };

    DayHistory.prototype.destroy = function(callback) {
      var options,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      options = {
        startTime: this.startTime,
        endTime: this.endTime
      };
      return this.history.deleteRange(options, function() {
        return callback();
      });
    };

    return DayHistory;

  })();

  parse = function(intervals) {
    var interval, item, out, visit, visits, _i, _j, _len, _len1, _ref;
    out = [];
    for (_i = 0, _len = intervals.length; _i < _len; _i++) {
      interval = intervals[_i];
      visits = [];
      _ref = interval.visits;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        visit = _ref[_j];
        item = _.isArray(visit) ? fillInGroupedVisit(visit) : fillInVisit(visit);
        visits.push(item);
      }
      out.push({
        id: interval.id,
        datetime: interval.datetime,
        visits: visits
      });
    }
    return out;
  };

  getDomain = function(url) {
    var match;
    match = url.match(/\w+:\/\/(.*?)\//);
    if (match === null) {
      return null;
    } else {
      return match[0];
    }
  };

  fillInVisit = function(visit) {
    visit.domain = getDomain(visit.url);
    visit.host = getDomain(visit.url);
    visit.path = visit.url.replace(visit.domain, '');
    if (visit.title === '') {
      visit.title = '(No Title)';
    }
    return visit;
  };

  fillInGroupedVisit = function(visits) {
    var groupedVisit, visit;
    visits = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = visits.length; _i < _len; _i++) {
        visit = visits[_i];
        _results.push(fillInVisit(visit));
      }
      return _results;
    })();
    visit = visits[0];
    return groupedVisit = {
      host: visit.domain,
      domain: visit.domain,
      url: visit.url,
      time: visits.time,
      isGrouped: true,
      visits: visits
    };
  };

}).call(this);
