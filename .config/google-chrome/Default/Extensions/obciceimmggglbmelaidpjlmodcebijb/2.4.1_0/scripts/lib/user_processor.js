// Generated by CoffeeScript 1.6.1
(function() {
  var showLoginErrorView, showServerErrorView;

  showServerErrorView = function() {
    var serverErrorModal;
    serverErrorModal = new BH.Modals.ServerErrorModal();
    return serverErrorModal.open();
  };

  showLoginErrorView = function() {
    var loginErrorModal;
    loginErrorModal = new BH.Modals.LoginErrorModal();
    return loginErrorModal.open();
  };

  BH.Lib.UserProcessor = (function() {

    function UserProcessor() {
      this.tracker = analyticsTracker;
    }

    UserProcessor.prototype.start = function() {
      var connectionRequiredView, googleUserInfo,
        _this = this;
      if (!navigator.onLine) {
        $('.login_spinner').hide();
        connectionRequiredView = new BH.Views.ConnectionRequiredView();
        return connectionRequiredView.open();
      } else {
        googleUserInfo = new BH.Lib.GoogleUserInfo();
        return googleUserInfo.fetch({
          success: function(userInfo) {
            var sub;
            _this.tracker.userOAuthSuccess();
            sub = userInfo.sub;
            return $.ajax({
              url: "http://" + window.apiHost + "/user",
              data: {
                subId: userInfo.sub,
                email: userInfo.email,
                avatar: userInfo.picture,
                firstName: userInfo.given_name,
                lastName: userInfo.family_name
              },
              type: 'POST',
              dataType: 'json',
              success: function(data) {
                if (data.purchased) {
                  return _this.loggedIn(data);
                } else {
                  _this.tracker.userCreationSuccess();
                  return $.post("http://" + window.apiHost + "/purchase/payment_token", {
                    authId: data.authId
                  }, function(result) {
                    return google.payments.inapp.buy({
                      parameters: {},
                      jwt: result.jwt,
                      success: function() {
                        _this.loggedIn(data);
                        return _this.tracker.syncPurchaseSuccess();
                      },
                      failure: function() {
                        return this.tracker.syncPurchaseFailure();
                      }
                    });
                  });
                }
              },
              error: function() {
                showLoginErrorView();
                _this.tracker.userCreationFailure();
                return $('.login_spinner').hide();
              }
            });
          },
          error: function() {
            showLoginErrorView();
            _this.tracker.userOAuthFailure();
            return $('.login_spinner').hide();
          }
        });
      }
    };

    UserProcessor.prototype.loggedIn = function(userData) {
      var _this = this;
      this.tracker.userLoggedIn();
      return persistence.tag().fetchTags(function(tags, compiledTags) {
        var syncingTranslator;
        if (tags.length > 0) {
          syncingTranslator = new BH.Lib.SyncingTranslator();
          return syncingTranslator.forServer(compiledTags, function(sites) {
            var sitesHasher;
            sitesHasher = new BH.Lib.SitesHasher(CryptoJS.SHA1);
            sites = sitesHasher.generate(sites).toString();
            if (userData.sitesHash != null) {
              if (userData.sitesHash === sites) {
                return _this.initialSync(null, userData);
              } else {
                return _this.syncDecision(userData);
              }
            } else {
              if (tags.length !== 0) {
                return _this.initialSync('push', userData);
              } else {
                return _this.initialSync('push', userData);
              }
            }
          });
        } else {
          return _this.initialSync('pull', userData);
        }
      });
    };

    UserProcessor.prototype.syncDecision = function(userData) {
      var syncingDecisionModal,
        _this = this;
      syncingDecisionModal = new BH.Modals.SyncingDecisionModal({
        model: new Backbone.Model(userData)
      });
      syncingDecisionModal.open();
      syncingDecisionModal.on('decision', function(decision) {
        if (decision === 'push') {
          return _this.pushLocalTags(userData, function() {
            return syncingDecisionModal.doneSyncing();
          });
        } else {
          return _this.pullRemoteTags(userData, function() {
            return syncingDecisionModal.doneSyncing();
          });
        }
      });
      return syncingDecisionModal.on('syncingComplete', function() {
        return window.user.login(userData);
      });
    };

    UserProcessor.prototype.initialSync = function(direction, userData) {
      var initialSyncingModal,
        _this = this;
      initialSyncingModal = new BH.Modals.InitialSyncingModal();
      initialSyncingModal.open();
      initialSyncingModal.on('open', function() {
        if (direction === 'push') {
          return _this.pushLocalTags(userData, function() {
            return initialSyncingModal.doneSyncing();
          });
        } else if (direction === 'pull') {
          return _this.pullRemoteTags(userData, function() {
            return initialSyncingModal.doneSyncing();
          });
        } else if (direction === null) {
          return initialSyncingModal.doneSyncing();
        }
      });
      return initialSyncingModal.on('syncingComplete', function() {
        return window.user.login(userData);
      });
    };

    UserProcessor.prototype.pushLocalTags = function(userData, callback) {
      return persistence.remote(userData.authId).deleteSites(function() {
        return persistence.tag().fetchTags(function(tags, compiledTags) {
          var syncingTranslator;
          if (tags.length === 0) {
            return callback();
          } else {
            syncingTranslator = new BH.Lib.SyncingTranslator();
            return syncingTranslator.forServer(compiledTags, function(sites) {
              return persistence.remote().updateSites(sites, function() {
                return setTimeout((function() {
                  return callback();
                }), 2000);
              });
            });
          }
        });
      });
    };

    UserProcessor.prototype.pullRemoteTags = function(userData, callback) {
      return persistence.tag().removeAllTags(function() {
        return persistence.remote(userData.authId).getSites(function(sites) {
          var data, syncingTranslator;
          syncingTranslator = new BH.Lib.SyncingTranslator();
          data = syncingTranslator.forLocal(sites);
          return persistence.tag()["import"](data, function() {
            return setTimeout((function() {
              return callback();
            }), 2000);
          });
        });
      });
    };

    return UserProcessor;

  })();

}).call(this);
