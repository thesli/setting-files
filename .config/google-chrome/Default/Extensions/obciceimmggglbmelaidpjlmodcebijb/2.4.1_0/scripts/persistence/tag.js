// Generated by CoffeeScript 1.6.1
(function() {

  BH.Persistence.Tag = (function() {

    function Tag(options) {
      if (options.localStore == null) {
        throw "Localstore is not set";
      }
      this.localStore = options.localStore;
    }

    Tag.prototype.setSitesHash = function(sitesHash) {
      return this.localStore.set({
        sitesHash: sitesHash
      }, function() {});
    };

    Tag.prototype.getSitesHash = function(callback) {
      return this.localStore.get('sitesHash', function(data) {
        return callback(data);
      });
    };

    Tag.prototype.getCompletedMigrations = function(callback) {
      return this.localStore.get('completedMigrations', function(data) {
        return callback(data.completedMigrations || []);
      });
    };

    Tag.prototype.markMigrationAsComplete = function(name, callback) {
      var _this = this;
      return this.localStore.get('completedMigrations', function(data) {
        data.completedMigrations || (data.completedMigrations = []);
        data.completedMigrations.push(name);
        return _this.localStore.set(data, function() {
          return callback();
        });
      });
    };

    Tag.prototype.cached = function(callback) {
      return this.localStore.get(null, function(data) {
        return callback({
          siteTags: function(url) {
            var matches, result, tag, _i, _len, _ref;
            matches = [];
            _ref = data.tags;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              result = _.where(data[tag], {
                url: url
              });
              if (result.length > 0) {
                matches.push(tag);
              }
            }
            return matches;
          },
          sitesTags: function(urls) {
            var matches, result, siteTags, tag, url, _i, _j, _len, _len1, _ref;
            siteTags = [];
            for (_i = 0, _len = urls.length; _i < _len; _i++) {
              url = urls[_i];
              matches = [];
              _ref = data.tags;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                tag = _ref[_j];
                result = _.where(data[tag], {
                  url: url
                });
                if (result.length > 0) {
                  matches.push(tag);
                }
              }
              siteTags.push(matches);
            }
            return _.intersection.apply(this, siteTags);
          }
        });
      });
    };

    Tag.prototype.fetchTags = function(callback) {
      var _this = this;
      return this.localStore.get('tags', function(data) {
        var tags;
        tags = data.tags || [];
        return _this.localStore.get(tags, function(data) {
          var compiledTags, foundTags, sites, tag;
          foundTags = [];
          compiledTags = (function() {
            var _results;
            _results = [];
            for (tag in data) {
              sites = data[tag];
              _results.push({
                name: tag,
                sites: sites
              });
            }
            return _results;
          })();
          return callback(tags, compiledTags);
        });
      });
    };

    Tag.prototype.fetchTagSites = function(name, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.localStore.get(name, function(data) {
        var site, sites;
        data[name] || (data[name] = []);
        sites = (function() {
          var _i, _len, _ref, _results;
          _ref = data[name];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            site = _ref[_i];
            _results.push({
              title: site.title,
              url: site.url,
              datetime: site.datetime
            });
          }
          return _results;
        })();
        return callback(sites);
      });
    };

    Tag.prototype.fetchSharedTag = function(name, callback) {
      return this.localStore.get('sharedTags', function(data) {
        data.sharedTags || (data.sharedTags = {});
        return callback(data.sharedTags[name]);
      });
    };

    Tag.prototype.fetchSiteTags = function(url, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.localStore.get('tags', function(data) {
        var tags;
        tags = data.tags || [];
        return _this.localStore.get(tags, function(data) {
          var foundTags, site, sites, tag, _i, _len;
          foundTags = [];
          for (tag in data) {
            sites = data[tag];
            for (_i = 0, _len = sites.length; _i < _len; _i++) {
              site = sites[_i];
              if (site.url === url) {
                foundTags.push(tag);
              }
            }
          }
          return callback(foundTags);
        });
      });
    };

    Tag.prototype.shareTag = function(tag, url, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.localStore.get("sharedTags", function(data) {
        if (data.sharedTags == null) {
          data = {
            sharedTags: {}
          };
        }
        data.sharedTags[tag] = url;
        return _this.localStore.set(data, function() {
          return callback();
        });
      });
    };

    Tag.prototype.addSiteToTag = function(site, tag, callback) {
      var operations,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      operations = {
        tagCreated: false
      };
      this.localStore.get("tags", function(data) {
        if (data.tags == null) {
          data = {
            tags: []
          };
        }
        if (data.tags.indexOf(tag) === -1) {
          operations.tagCreated = true;
          data.tags.unshift(tag);
        }
        return _this.localStore.set(data, function() {
          return _this.localStore.get(tag, function(data) {
            data[tag] || (data[tag] = []);
            data[tag].push(site);
            return _this.localStore.set(data, function() {
              return callback(operations);
            });
          });
        });
      });
      return this.expireSharedTag(tag);
    };

    Tag.prototype.addSitesToTag = function(sites, tag, callback) {
      var operations,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      operations = {
        tagCreated: false
      };
      this.localStore.get("tags", function(data) {
        if (data.tags == null) {
          data = {
            tags: []
          };
        }
        if (data.tags.indexOf(tag) === -1) {
          operations.tagCreated = true;
          data.tags.unshift(tag);
        }
        return _this.localStore.set(data, function() {
          return _this.localStore.get(tag, function(data) {
            var site, _i, _len;
            for (_i = 0, _len = sites.length; _i < _len; _i++) {
              site = sites[_i];
              data[tag] || (data[tag] = []);
              data[tag].push(site);
            }
            return _this.localStore.set(data, function() {
              return callback(operations);
            });
          });
        });
      });
      return this.expireSharedTag(tag);
    };

    Tag.prototype["import"] = function(data, callback) {
      return this.localStore.set(data, callback);
    };

    Tag.prototype.clearAll = function() {
      return this.localStore.clear();
    };

    Tag.prototype.removeSiteFromTag = function(url, tag, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      this.localStore.get(tag, function(data) {
        data[tag] || (data[tag] = []);
        data[tag] = _.reject(data[tag], function(site) {
          return url === site.url;
        });
        return _this.localStore.set(data, function() {
          return callback(data[tag]);
        });
      });
      return this.expireSharedTag(tag);
    };

    Tag.prototype.removeSitesFromTag = function(urls, tag, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      this.localStore.get(tag, function(data) {
        data[tag] || (data[tag] = []);
        data[tag] = _.reject(data[tag], function(site) {
          return _.find(urls, function(url) {
            return site.url === url;
          });
        });
        return _this.localStore.set(data, function() {
          return callback(data[tag]);
        });
      });
      return this.expireSharedTag(tag);
    };

    Tag.prototype.removeTag = function(tag, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      this.localStore.get('tags', function(data) {
        data.tags || (data.tags = []);
        data.tags = _.without(data.tags, tag);
        return _this.localStore.set(data, function() {
          return _this.localStore.remove(tag, function() {
            return callback();
          });
        });
      });
      return this.expireSharedTag(tag);
    };

    Tag.prototype.removeAllTags = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      this.localStore.get('tags', function(data) {
        var tags;
        tags = data.tags || [];
        return _this.localStore.remove(tags, function() {
          return _this.localStore.set({
            tags: []
          }, function() {
            return callback();
          });
        });
      });
      return this.expireSharedTag();
    };

    Tag.prototype.renameTag = function(oldTag, newTag, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      this.localStore.get('tags', function(data) {
        var newTagExists;
        data.tags || (data.tags = []);
        if (data.tags.indexOf(newTag) !== -1) {
          newTagExists = true;
        }
        data.tags = _.without(data.tags, oldTag);
        if (newTagExists) {
          data.tags = _.without(data.tags, newTag);
        }
        data.tags.unshift(newTag);
        return _this.localStore.set(data, function() {
          return _this.localStore.get(oldTag, function(data) {
            var sites;
            sites = data[oldTag];
            if (newTagExists) {
              return _this.localStore.get(newTag, function(data) {
                return _this.localStore.remove(oldTag, function() {
                  var site, _i, _len;
                  for (_i = 0, _len = sites.length; _i < _len; _i++) {
                    site = sites[_i];
                    data[newTag].push(site);
                  }
                  return _this.localStore.set(data, function() {
                    return callback();
                  });
                });
              });
            } else {
              return _this.localStore.remove(oldTag, function() {
                data = {};
                data[newTag] = sites;
                return _this.localStore.set(data, function() {
                  return callback();
                });
              });
            }
          });
        });
      });
      return this.expireSharedTag(oldTag);
    };

    Tag.prototype.expireSharedTag = function(tag, callback) {
      var _this = this;
      if (tag == null) {
        tag = null;
      }
      if (callback == null) {
        callback = function() {};
      }
      return this.localStore.get('sharedTags', function(data) {
        data.sharedTags || (data.sharedTags = {});
        if (tag != null) {
          delete data.sharedTags[tag];
        } else {
          data.sharedTags = {};
        }
        return _this.localStore.set(data, function() {
          return callback();
        });
      });
    };

    return Tag;

  })();

}).call(this);
