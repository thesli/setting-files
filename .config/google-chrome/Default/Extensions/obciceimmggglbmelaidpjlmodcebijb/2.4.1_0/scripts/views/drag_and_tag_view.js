// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.DragAndTagView = (function(_super) {

    __extends(DragAndTagView, _super);

    function DragAndTagView() {
      return DragAndTagView.__super__.constructor.apply(this, arguments);
    }

    DragAndTagView.include(BH.Modules.I18n);

    DragAndTagView.prototype.initialize = function() {
      this.tracker = analyticsTracker;
      this.chromeAPI = chrome;
      return this.excludeTag = this.options.excludeTag;
    };

    DragAndTagView.prototype.render = function() {
      var handleDragEnd, handleDragStart,
        _this = this;
      handleDragStart = function(ev) {
        var $el, availableTagsView, collection, data, summaryEl;
        ev.stopPropagation();
        $el = $(ev.currentTarget);
        $el.addClass('dragging');
        $('.navigation').addClass('dropzone');
        data = {
          sites: []
        };
        if ($el.find('ol.visits').length > 0) {
          $el.find('ol.visits .visit').each(function() {
            return data.sites.push({
              url: $(this).data('url'),
              title: $(this).data('title'),
              datetime: new Date().getTime()
            });
          });
        } else {
          data.sites.push({
            url: $el.data('url'),
            title: $el.data('title'),
            datetime: new Date().getTime(),
            partOfGroup: $el.parents('.grouped_sites').length > 0 ? true : void 0
          });
        }
        _this.tracker.siteTagDrag();
        if (!(summaryEl = document.getElementsByClassName('drag_ghost')[0])) {
          summaryEl = document.createElement('div');
          summaryEl.className = 'drag_ghost';
          $('body').append(summaryEl);
        }
        summaryEl.innerHTML = _this.t('number_of_visits', [data.sites.length]);
        ev.dataTransfer.setDragImage(summaryEl, -15, -10);
        ev.dataTransfer.setData('application/json', JSON.stringify(data));
        collection = new BH.Collections.Tags([]);
        availableTagsView = new BH.Views.AvailableTagsView({
          collection: collection,
          draggedSites: data.sites,
          el: '.available_tags'
        });
        availableTagsView.on('site:untagged site:tagged', function(site) {
          var $visit;
          if ($el.find('ol.visits').length > 0) {
            $visit = $el.find("[data-url='" + site.url + "']");
          }
          return _this.trigger('site:change', site, $visit || $el);
        });
        availableTagsView.on('sites:untagged sites:tagged', function(site) {
          var $visit;
          if ($el.parents('.grouped_sites').length > 0) {
            $visit = $el.parents('.grouped_sites');
          }
          return _this.trigger('sites:change', site, $visit || $el);
        });
        return collection.fetch();
      };
      handleDragEnd = function(ev) {
        var $el;
        $el = $(ev.currentTarget);
        $el.removeClass('dragging');
        return $('.navigation').removeClass('dropzone');
      };
      return $('.visit').each(function(i, visit) {
        visit.addEventListener('dragstart', handleDragStart, false);
        return visit.addEventListener('dragend', handleDragEnd, false);
      });
    };

    return DragAndTagView;

  })(Backbone.View);

}).call(this);
