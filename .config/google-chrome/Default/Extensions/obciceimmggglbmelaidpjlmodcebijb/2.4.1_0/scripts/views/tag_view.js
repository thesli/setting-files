// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.TagView = (function(_super) {

    __extends(TagView, _super);

    function TagView() {
      return TagView.__super__.constructor.apply(this, arguments);
    }

    TagView.include(BH.Modules.I18n);

    TagView.include(BH.Modules.Url);

    TagView.prototype.className = 'tag_view with_controls';

    TagView.prototype.template = BH.Templates['tag'];

    TagView.prototype.events = {
      'click .delete_sites': 'onDeleteSitesClicked',
      'click .rename': 'onRenameClicked',
      'click .share': 'onShareClicked',
      'click .read_only_explanation': 'onReadOnlyExplanationClicked',
      'keyup .search': 'onSearchTyped',
      'blur .search': 'onSearchBlurred'
    };

    TagView.prototype.initialize = function() {
      this.chromeAPI = chrome;
      this.tracker = analyticsTracker;
      this.model.on('change', this.onSitesLoaded, this);
      this.model.on('change:name', this.onNameChange, this);
      tagState.on('change:readOnly', this.onReadOnlyChange, this);
      return tagState.on('synced', this.onSynced, this);
    };

    TagView.prototype.pageTitle = function() {
      return this.t('tag_title', [this.options.name]);
    };

    TagView.prototype.render = function() {
      var html, properties;
      properties = _.extend(this.getI18nValues(), {
        tagsUrl: '#tags'
      }, tagState.toJSON());
      html = Mustache.to_html(this.template, properties);
      this.$el.append(html);
      return this;
    };

    TagView.prototype.onReadOnlyChange = function() {
      this.$el.html('');
      this.render();
      return this.model.fetch();
    };

    TagView.prototype.onSynced = function() {
      this.$el.html('');
      this.render();
      return this.model.fetch();
    };

    TagView.prototype.onSitesLoaded = function() {
      return this.renderTaggedSites();
    };

    TagView.prototype.onNameChange = function() {
      return router.navigate(this.urlFor('tag', this.model.get('name')), {
        trigger: true
      });
    };

    TagView.prototype.renderTaggedSites = function() {
      if (this.taggedSitesView) {
        this.taggedSitesView.remove();
      }
      this.taggedSitesView = new BH.Views.TaggedSitesView({
        model: this.model
      });
      this.$('.content').html(this.taggedSitesView.render().el);
      this.taggedSitesView.attachDragging();
      return this.taggedSitesView.insertTags();
    };

    TagView.prototype.onReadOnlyExplanationClicked = function(ev) {
      var readOnlyExplanationModal;
      ev.preventDefault();
      readOnlyExplanationModal = new BH.Modals.ReadOnlyExplanationModal();
      return readOnlyExplanationModal.open();
    };

    TagView.prototype.onDeleteSitesClicked = function(ev) {
      this.tracker.deleteTagClick();
      return this.promptToDeleteAllSites();
    };

    TagView.prototype.onRenameClicked = function(ev) {
      var renameTagModal;
      ev.preventDefault();
      this.tracker.renameTagClick();
      renameTagModal = new BH.Modals.RenameTagModal({
        model: this.model,
        tracker: this.tracker
      });
      $('body').append(renameTagModal.render().el);
      renameTagModal.open();
      return $('.new_tag').focus();
    };

    TagView.prototype.onShareClicked = function(ev) {
      var $smallSpinner, url,
        _this = this;
      ev.preventDefault();
      this.tracker.shareClicked();
      if (this.model.get('url')) {
        url = encodeURIComponent(this.model.get('url'));
        return this.chromeAPI.tabs.create({
          url: "http://" + window.siteHost + "/from_ext/" + url
        });
      } else {
        $smallSpinner = this.$('.small_spinner');
        if (!$smallSpinner.hasClass('show')) {
          $smallSpinner.addClass('show');
          return this.model.share({
            success: function(data) {
              $smallSpinner.removeClass('show');
              url = encodeURIComponent(data.url);
              _this.chromeAPI.tabs.create({
                url: "http://" + window.siteHost + "/from_ext/" + url
              });
              return _this.model.set({
                url: data.url
              });
            },
            error: function() {
              $smallSpinner.removeClass('show');
              return alert('There was an error. Please try again later');
            }
          });
        }
      }
    };

    TagView.prototype.promptToDeleteAllSites = function() {
      var promptMessage;
      promptMessage = this.t('confirm_delete_tag', [this.options.name]);
      this.promptView = BH.Views.CreatePrompt(promptMessage);
      this.promptView.open();
      return this.promptView.model.on('change', this.promptAction, this);
    };

    TagView.prototype.promptAction = function(prompt) {
      var tagName,
        _this = this;
      if (prompt.get('action')) {
        tagName = this.model.get('name');
        this.model.destroy(function() {});
        this.promptView.close();
        this.tracker.tagRemoved();
        if (user.isLoggedIn()) {
          persistence.remote().deleteTag(tagName);
        }
        return router.navigate('#tags', {
          trigger: true
        });
      } else {
        return this.promptView.close();
      }
    };

    TagView.prototype.getI18nValues = function() {
      var name, properties;
      name = this.options.name.charAt(0).toUpperCase() + this.options.name.slice(1);
      properties = this.t(['delete_tag', 'search_input_placeholder_text', 'rename_tag_link', 'share_tag_link', 'read_only_explanation_link']);
      properties['i18n_tag_title'] = this.t('tag_title', [name]);
      properties['i18n_back_to_tags_link'] = this.t('back_to_tags_link', [this.t('back_arrow')]);
      return properties;
    };

    return TagView;

  })(BH.Views.MainView);

}).call(this);
