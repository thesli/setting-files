// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.TaggingView = (function(_super) {

    __extends(TaggingView, _super);

    function TaggingView() {
      return TaggingView.__super__.constructor.apply(this, arguments);
    }

    TaggingView.include(BH.Modules.I18n);

    TaggingView.include(BH.Modules.Url);

    TaggingView.prototype.template = BH.Templates['tagging'];

    TaggingView.prototype.className = 'tagging_view';

    TaggingView.prototype.events = {
      'click #view_history': 'viewHistoryClicked',
      'click #explore_tags': 'exploreTagsClicked',
      'click #search_domain': 'searchDomainClicked',
      'click #tag_details': 'tagDetailsClicked',
      'click .dismiss_instructions': 'dismissInstructionsClicked',
      'click #add_tag': 'addTagClicked'
    };

    TaggingView.prototype.initialize = function() {
      this.chromeAPI = chrome;
      this.tracker = this.options.tracker;
      return this.model.on('reset:tags', this.renderTags, this);
    };

    TaggingView.prototype.render = function() {
      var _this = this;
      return this.getShortcut(function(commands) {
        var html, presenter, properties;
        presenter = new BH.Presenters.SitePresenter(_this.model);
        properties = _.extend(presenter.site(), _this.getI18nValues());
        properties.i18n_search_domain_history_link = _this.t('search_domain_history_link', [properties.domain]);
        if (commands != null) {
          properties.shortcut = _.where(commands, {
            name: '_execute_browser_action'
          })[0].shortcut;
        }
        if (user.isLoggedIn()) {
          properties.loggedIn = true;
        }
        _.extend(properties, tagState.toJSON());
        html = Mustache.to_html(_this.template, properties);
        _this.tracker.popupVisible();
        _this.$el.html(html);
        _this.$('.links a').each(function(i) {
          return $(this).attr('tabindex', i);
        });
        setTimeout(function() {
          return _this.$('#tag_name').focus();
        }, 0);
        return _this;
      });
    };

    TaggingView.prototype.getShortcut = function(callback) {
      var _ref,
        _this = this;
      if (((_ref = this.chromeAPI.commands) != null ? _ref.getAll : void 0) != null) {
        return this.chromeAPI.commands.getAll(function(commands) {
          return callback(commands);
        });
      } else {
        return callback();
      }
    };

    TaggingView.prototype.renderTags = function() {
      if (this.autocompleteTagsView) {
        this.autocompleteTagsView.remove();
      }
      this.autocompleteTagsView = new BH.Views.AutocompleteTagsView({
        model: this.model,
        collection: this.collection,
        tracker: this.tracker
      });
      this.$('.autocomplete').html(this.autocompleteTagsView.render().el);
      return this.collection.fetch();
    };

    TaggingView.prototype.viewHistoryClicked = function(ev) {
      ev.preventDefault();
      this.tracker.viewAllHistoryPopupClick();
      return chrome.tabs.create({
        url: $(ev.currentTarget).attr('href')
      });
    };

    TaggingView.prototype.exploreTagsClicked = function(ev) {
      ev.preventDefault();
      this.tracker.exploreTagsPopupClick();
      return chrome.tabs.create({
        url: $(ev.currentTarget).attr('href')
      });
    };

    TaggingView.prototype.searchDomainClicked = function(ev) {
      ev.preventDefault();
      this.tracker.searchByDomainPopupClick();
      return chrome.tabs.create({
        url: $(ev.currentTarget).attr('href')
      });
    };

    TaggingView.prototype.tagDetailsClicked = function(ev) {
      ev.preventDefault();
      this.tracker.tagDetailsPopupClick();
      return chrome.tabs.create({
        url: $(ev.currentTarget).attr('href')
      });
    };

    TaggingView.prototype.addTagClicked = function(ev) {
      var $tagName, parent, tag;
      ev.preventDefault();
      $tagName = this.$('#tag_name');
      tag = $tagName.val();
      $tagName.val('');
      this.tracker.addTagPopup();
      if (this.model.addTag(tag) === false) {
        if (parent = $("[data-tag='" + tag + "']").parents('li')) {
          parent.addClass('glow');
          return setTimeout(function() {
            return parent.removeClass('glow');
          }, 1000);
        }
      }
    };

    TaggingView.prototype.dismissInstructionsClicked = function(ev) {
      ev.preventDefault();
      syncStore.set({
        tagInstructionsDismissed: true
      });
      return $('.about_tags').hide();
    };

    TaggingView.prototype.getI18nValues = function() {
      var properties;
      properties = this.t(['view_all_history_link', 'explore_tags_link']);
      properties.i18n_about_tags_for_popup = this.t('about_tags_for_popup', ['<span class="new">', '</span>', '<a id="tag_details" href="chrome://history/#tags">', '</a>']);
      return properties;
    };

    return TaggingView;

  })(BH.Views.MainView);

}).call(this);
