// Generated by CoffeeScript 1.6.1
(function() {

  BH.Chrome.History = (function() {

    function History(chromeAPI) {
      this.chromeAPI = chromeAPI != null ? chromeAPI : chrome;
    }

    History.prototype.query = function(options, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return this.chromeAPI.history.search(options, function(visits) {
        var visit, _i, _len;
        for (_i = 0, _len = visits.length; _i < _len; _i++) {
          visit = visits[_i];
          visit.date = new Date(visit.lastVisitTime);
          visit.extendedDate = moment(visit.date).format(_this.chromeAPI.i18n.getMessage('extended_formal_date'));
          visit.time = moment(visit.date).format(_this.chromeAPI.i18n.getMessage('local_time'));
        }
        return callback(visits);
      });
    };

    History.prototype.deleteAll = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this.chromeAPI.history.deleteAll(function() {
        return callback();
      });
    };

    History.prototype.deleteUrl = function(url, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (url == null) {
        throw "Url needed";
      }
      return this.chromeAPI.history.deleteUrl({
        url: url
      }, function() {
        return callback();
      });
    };

    History.prototype.deleteRange = function(range, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      if (range.startTime == null) {
        throw "Start time needed";
      }
      if (range.endTime == null) {
        throw "End time needed";
      }
      return this.chromeAPI.history.deleteRange(range, function() {
        return callback();
      });
    };

    return History;

  })();

}).call(this);
