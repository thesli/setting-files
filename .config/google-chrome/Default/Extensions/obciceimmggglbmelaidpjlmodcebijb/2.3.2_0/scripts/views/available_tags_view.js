// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.AvailableTagsView = (function(_super) {

    __extends(AvailableTagsView, _super);

    function AvailableTagsView() {
      return AvailableTagsView.__super__.constructor.apply(this, arguments);
    }

    AvailableTagsView.include(BH.Modules.I18n);

    AvailableTagsView.prototype.template = BH.Templates['available_tags'];

    AvailableTagsView.prototype.initialize = function() {
      this.tracker = analyticsTracker;
      this.draggedSites = this.options.draggedSites;
      this.excludedTag = this.options.excludedTag;
      return this.collection.on('reset', this.render, this);
    };

    AvailableTagsView.prototype.render = function() {
      var html, presenter, properties,
        _this = this;
      presenter = new BH.Presenters.TagsPresenter(this.collection);
      properties = presenter.selectedAndUnselectedTagsforSites(this.draggedSites);
      html = Mustache.to_html(this.template, properties);
      this.$el.html(html);
      $('.available_tags li').each(function(i, tag) {
        tag.addEventListener('dragenter', function(ev) {
          return $(ev.currentTarget).addClass('over');
        }, false);
        tag.addEventListener('dragleave', function(ev) {
          return $(ev.currentTarget).removeClass('over');
        }, false);
        tag.addEventListener('dragover', function(ev) {
          ev.preventDefault();
          return ev.dataTransfer.effect = 'move';
        }, false);
        return tag.addEventListener('drop', function(ev) {
          var $el, collection, draggedData;
          $el = $(ev.currentTarget);
          ev.stopPropagation();
          _this.tracker.siteTagDrop();
          draggedData = ev.dataTransfer.getData('application/json');
          collection = _this.inflateDraggedData(draggedData);
          collection.fetch();
          collection.on('reset:allTags', function() {
            var tagName;
            if ($el.hasClass('new_tag')) {
              _this.renderNewTagView(collection);
            } else {
              tagName = $el.data('tag');
            }
            if ($el.hasClass('tagged')) {
              return _this.untagSites(tagName, collection);
            } else {
              return _this.tagSites(tagName, collection);
            }
          });
          return false;
        }, false);
      });
      return this;
    };

    AvailableTagsView.prototype.renderNewTagView = function(collection) {
      var newTagView,
        _this = this;
      newTagView = new BH.Views.NewTagView({
        model: new BH.Models.Tag(),
        tracker: this.tracker
      });
      $('body').append(newTagView.render().el);
      newTagView.open();
      $('.new_tag').focus();
      return newTagView.model.on('change:name', function() {
        return _this.tagSites(newTagView.model.get('name'), collection);
      });
    };

    AvailableTagsView.prototype.untagSites = function(tag, collection) {
      var _this = this;
      return collection.removeTag(tag, function() {
        collection.each(function() {
          return _this.tracker.siteUntagged();
        });
        return _this.rerenderTags(collection);
      });
    };

    AvailableTagsView.prototype.tagSites = function(tag, collection) {
      var _this = this;
      return collection.addTag(tag, function(result, operations) {
        collection.each(function() {
          return _this.tracker.siteTagged();
        });
        if (operations.tagCreated) {
          _this.tracker.tagAdded();
        }
        return _this.rerenderTags(collection);
      });
    };

    AvailableTagsView.prototype.inflateDraggedData = function(data) {
      var sites;
      sites = JSON.parse(data).sites;
      return new BH.Collections.Sites(sites, {
        chrome: chrome
      });
    };

    AvailableTagsView.prototype.rerenderTags = function(collection) {
      var $container, $parentVisit, activeTagsView, site, _i, _len, _ref;
      _ref = collection.toJSON();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        site = _ref[_i];
        if ((this.excludedTag != null) && site.tags.indexOf(this.excludedTag) === -1) {
          $("[data-id='" + site.id + "']").remove();
        }
        if (this.excludedTag != null) {
          site.tags = _.without(site.tags, this.excludedTag);
        }
        activeTagsView = new BH.Views.ActiveTagsView({
          model: new BH.Models.Site(site),
          editable: false
        });
        $container = $("[data-id='" + site.id + "']");
        $container.find('.active_tags').html(activeTagsView.render().el);
        $container.addClass('fade_out');
      }
      $parentVisit = $("[data-id=" + (collection.at(0).id)).parents('.visit');
      if ($parentVisit.length > 0) {
        if (collection.length === $parentVisit.find('.site').length) {
          activeTagsView = new BH.Views.ActiveTagsView({
            model: new BH.Models.Site({
              tags: collection.sharedTags()
            }),
            editable: false
          });
          return $parentVisit.find('.active_tags').eq(0).html(activeTagsView.render().el);
        }
      }
    };

    return AvailableTagsView;

  })(Backbone.View);

}).call(this);
