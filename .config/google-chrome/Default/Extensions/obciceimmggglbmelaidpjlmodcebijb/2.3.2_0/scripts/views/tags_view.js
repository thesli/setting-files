// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.TagsView = (function(_super) {

    __extends(TagsView, _super);

    function TagsView() {
      return TagsView.__super__.constructor.apply(this, arguments);
    }

    TagsView.include(BH.Modules.I18n);

    TagsView.prototype.className = 'tags_view with_controls';

    TagsView.prototype.template = BH.Templates['tags'];

    TagsView.prototype.events = {
      'click .delete_all': 'onDeleteTagsClicked',
      'click .how_to_tag': 'onHowToTagClicked',
      'click .load_example_tags': 'onLoadExampleTagsClicked',
      'click .dismiss_instructions': 'onDismissInstructionsClicked',
      'click #sign_up': 'onBuyTagSyncingClicked',
      'click #sign_in': 'onSignInClicked',
      'click .read_only_explanation': 'onReadOnlyExplanationClicked',
      'keyup .search': 'onSearchTyped',
      'blur .search': 'onSearchBlurred'
    };

    TagsView.prototype.initialize = function() {
      this.chromeAPI = chrome;
      this.tracker = analyticsTracker;
      this.collection.on('reset', this.onTagsLoaded, this);
      user.on('login', this.onLoggedIn, this);
      user.on('logout', this.onLoggedOut, this);
      tagState.on('change:readOnly', this.onReadOnlyChange, this);
      return tagState.on('synced', this.onSynced, this);
    };

    TagsView.prototype.pageTitle = function() {
      return this.t('tags_title');
    };

    TagsView.prototype.render = function() {
      var html, properties;
      properties = _.extend(this.getI18nValues(), {
        loggedIn: user.isLoggedIn()
      }, tagState.toJSON());
      html = Mustache.to_html(this.template, properties);
      this.$el.append(html);
      return this;
    };

    TagsView.prototype.onReadOnlyChange = function() {
      this.$el.html('');
      this.render();
      return this.collection.fetch();
    };

    TagsView.prototype.onSynced = function() {
      this.$el.html('');
      this.render();
      return this.collection.fetch();
    };

    TagsView.prototype.onReadOnlyExplanationClicked = function(ev) {
      var readOnlyExplanationView;
      ev.preventDefault();
      readOnlyExplanationView = new BH.Views.ReadOnlyExplanationView();
      return readOnlyExplanationView.open();
    };

    TagsView.prototype.onBuyTagSyncingClicked = function(ev) {
      var signUpInfoView;
      ev.preventDefault();
      signUpInfoView = new BH.Views.SignUpInfoView();
      return signUpInfoView.open();
    };

    TagsView.prototype.onTagsLoaded = function() {
      var tag_count;
      tag_count = this.t('number_of_tags', [this.collection.length]);
      this.$('.tag_count').text(tag_count);
      return this.renderTags();
    };

    TagsView.prototype.onLoggedIn = function() {
      this.$('.sync_promo').hide();
      this.$('.sync_enabled').show();
      return this.$('.login_spinner').hide();
    };

    TagsView.prototype.onLoggedOut = function() {
      this.$('.sync_promo').show();
      return this.$('.sync_enabled').hide();
    };

    TagsView.prototype.onLoadExampleTagsClicked = function(ev) {
      var exampleTags,
        _this = this;
      ev.preventDefault();
      exampleTags = new BH.Lib.ExampleTags();
      return exampleTags.load(function() {
        return _this.collection.fetch();
      });
    };

    TagsView.prototype.renderTags = function() {
      if (this.tagsListView) {
        this.tagsListView.remove();
      }
      this.tagsListView = new BH.Views.TagsListView({
        collection: this.collection
      });
      this.$('.content').html(this.tagsListView.render().el);
      if (user.get('authId')) {
        return this.onLoggedIn();
      }
    };

    TagsView.prototype.onDismissInstructionsClicked = function(ev) {
      ev.preventDefault();
      syncStore.set({
        tagInstructionsDismissed: true
      });
      return $('.about_tags').hide();
    };

    TagsView.prototype.onSignInClicked = function(ev) {
      var userProcessor;
      ev.preventDefault();
      userProcessor = new BH.Lib.UserProcessor();
      userProcessor.start();
      return this.$('.login_spinner').show();
    };

    TagsView.prototype.onHowToTagClicked = function(ev) {
      var howToTagView;
      ev.preventDefault();
      howToTagView = new BH.Views.HowToTagView();
      return howToTagView.open();
    };

    TagsView.prototype.onDeleteTagsClicked = function(ev) {
      this.tracker.deleteAllTagsClick();
      return this.promptToDeleteTags();
    };

    TagsView.prototype.promptToDeleteTags = function() {
      var promptMessage;
      promptMessage = this.t('confirm_delete_all_tags');
      this.promptView = BH.Views.CreatePrompt(promptMessage);
      this.promptView.open();
      return this.promptView.model.on('change', this.promptAction, this);
    };

    TagsView.prototype.promptAction = function(prompt) {
      var _this = this;
      if (prompt.get('action')) {
        this.collection.destroy(function() {
          _this.collection.fetch();
          if (user.isLoggedIn()) {
            return persistence.remote().deleteSites();
          }
        });
        return this.promptView.close();
      } else {
        return this.promptView.close();
      }
    };

    TagsView.prototype.getI18nValues = function() {
      var properties;
      properties = this.t(['tags_title', 'search_input_placeholder_text', 'delete_all_tags', 'how_to_tag', 'read_only_explanation_link']);
      properties.i18n_sync_tags_link = this.t('sync_tags_link', ['<a style="text-decoration: underline;" href="#" id="sign_up">', '</a>', '<a style="text-decoration: underline;" href="#" id="sign_in">', '</a>']);
      properties.i18n_sync_enabled = this.t('sync_enabled', ['<span class="inline-tag">', '</span>']);
      return properties;
    };

    return TagsView;

  })(BH.Views.MainView);

}).call(this);
