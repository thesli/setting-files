// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.SearchResultsView = (function(_super) {

    __extends(SearchResultsView, _super);

    function SearchResultsView() {
      return SearchResultsView.__super__.constructor.apply(this, arguments);
    }

    SearchResultsView.include(BH.Modules.I18n);

    SearchResultsView.prototype.template = BH.Templates['search_results'];

    SearchResultsView.prototype.initialize = function() {
      return this.chromeAPI = chrome;
    };

    SearchResultsView.prototype.events = {
      'click .delete_visit': 'deleteClicked'
    };

    SearchResultsView.prototype.render = function() {
      var collectionToTemplate, end, highlightedVisits, html, properties, start, visit, _ref;
      _ref = BH.Lib.Pagination.calculateBounds(this.options.page), start = _ref[0], end = _ref[1];
      collectionToTemplate = this.model.toTemplate(start, end);
      highlightedVisits = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = collectionToTemplate.visits;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          visit = _ref1[_i];
          _results.push(this.markMatches(visit));
        }
        return _results;
      }).call(this);
      collectionToTemplate.visits = highlightedVisits;
      properties = _.extend(this.getI18nValues(), collectionToTemplate);
      html = Mustache.to_html(this.template, properties);
      this.$el.html(html);
      return this;
    };

    SearchResultsView.prototype.insertTags = function() {
      return persistence.tag().cached(function(operations) {
        return $('.site').each(function() {
          var $el, activeTagsView, tags;
          $el = $(this);
          tags = operations.siteTags($el.attr('href'));
          activeTagsView = new BH.Views.ActiveTagsView({
            model: new BH.Models.Site({
              tags: tags
            }),
            editable: false
          });
          return $el.find('.active_tags').html(activeTagsView.render().el);
        });
      });
    };

    SearchResultsView.prototype.attachDragging = function() {
      var dragAndTagView;
      dragAndTagView = new BH.Views.DragAndTagView({
        model: this.model
      });
      return dragAndTagView.render();
    };

    SearchResultsView.prototype.markMatches = function(visit) {
      var locationMatch, regExp, term, timeMatch, titleMatch, _i, _len, _ref;
      regExp = titleMatch = locationMatch = timeMatch = null;
      if (visit != null) {
        _ref = this.model.get('query').split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          term = _ref[_i];
          regExp = new RegExp(term, "i");
          visit.title = this._wrapMatchInProperty(regExp, visit.title);
          visit.location = this._wrapMatchInProperty(regExp, visit.location);
          visit.time = this._wrapMatchInProperty(regExp, visit.time);
          visit.extendedDate = this._wrapMatchInProperty(regExp, visit.extendedDate);
        }
      }
      return visit;
    };

    SearchResultsView.prototype._wrapMatchInProperty = function(regExp, property, match) {
      if (!property) {
        return;
      }
      match = property.match(regExp);
      if (match) {
        return property.replace(regExp, '<span class="match">' + match + '</span>');
      } else {
        return property;
      }
    };

    SearchResultsView.prototype.deleteClicked = function(ev) {
      var model,
        _this = this;
      ev.preventDefault();
      model = this._getModelFromElement($(ev.target));
      return model.destroy({
        success: function() {
          return _this._getElementFromModel(model).remove();
        }
      });
    };

    SearchResultsView.prototype._getModelFromElement = function(element) {
      var history;
      history = this.model.get('history');
      return history.get($(element).prev().data('id'));
    };

    SearchResultsView.prototype._getElementFromModel = function(model) {
      return $("[data-id='" + model.id + "']").parents('li');
    };

    SearchResultsView.prototype.getI18nValues = function() {
      return this.t(['no_visits_found']);
    };

    return SearchResultsView;

  })(Backbone.View);

}).call(this);
