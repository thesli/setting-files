// Generated by CoffeeScript 1.6.1
(function() {

  BH.Lib.SyncingTranslator = (function() {

    function SyncingTranslator() {}

    SyncingTranslator.prototype.forServer = function(compiledTags, callback, options) {
      var foundIndex, index, requestImage, site, sites, storedSite, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
      if (options == null) {
        options = {};
      }
      sites = [];
      for (_i = 0, _len = compiledTags.length; _i < _len; _i++) {
        tag = compiledTags[_i];
        _ref = tag.sites;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          site = _ref[_j];
          if (site.url) {
            foundIndex = null;
            for (index = _k = 0, _len2 = sites.length; _k < _len2; index = ++_k) {
              storedSite = sites[index];
              if (storedSite.url === site.url) {
                foundIndex = index;
                break;
              }
            }
            if (foundIndex != null) {
              sites[foundIndex].tags.push(tag.name);
            } else {
              site.tags = [tag.name];
              sites.push(site);
            }
          }
        }
      }
      if (!options.skipImages) {
        index = 1;
        requestImage = function(site) {
          return BH.Lib.ImageData.base64("chrome://favicon/" + site.url, function(data) {
            site.image = data;
            if (index === sites.length) {
              return callback(sites);
            } else {
              return index++;
            }
          });
        };
        _results = [];
        for (_l = 0, _len3 = sites.length; _l < _len3; _l++) {
          site = sites[_l];
          _results.push(requestImage(site));
        }
        return _results;
      } else {
        return callback(sites);
      }
    };

    SyncingTranslator.prototype.addImageToSites = function(sites, callback) {
      var index, requestImage, site, _i, _len, _results;
      index = 1;
      requestImage = function(site) {
        return BH.Lib.ImageData.base64("chrome://favicon/" + site.url, function(data) {
          site.image = data;
          if (index === sites.length) {
            return callback(sites);
          } else {
            return index++;
          }
        });
      };
      _results = [];
      for (_i = 0, _len = sites.length; _i < _len; _i++) {
        site = sites[_i];
        _results.push(requestImage(site));
      }
      return _results;
    };

    SyncingTranslator.prototype.forLocal = function(sites) {
      var data, site, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
      data = {
        tags: []
      };
      for (_i = 0, _len = sites.length; _i < _len; _i++) {
        site = sites[_i];
        _ref = site.tags;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          tag = _ref[_j];
          data.tags.push(tag);
        }
      }
      data.tags = _.uniq(data.tags);
      _ref1 = data.tags;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        tag = _ref1[_k];
        data[tag] = [];
      }
      for (_l = 0, _len3 = sites.length; _l < _len3; _l++) {
        site = sites[_l];
        if (site.datetime == null) {
          site.datetime = new Date().getTime();
        }
        _ref2 = site.tags;
        for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
          tag = _ref2[_m];
          data[tag].push({
            url: site.url,
            title: site.title,
            datetime: site.datetime
          });
        }
      }
      return data;
    };

    return SyncingTranslator;

  })();

}).call(this);
