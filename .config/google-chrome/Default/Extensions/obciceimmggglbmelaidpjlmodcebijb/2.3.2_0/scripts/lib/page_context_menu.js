// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Lib.PageContextMenu = (function(_super) {

    __extends(PageContextMenu, _super);

    PageContextMenu.include(BH.Modules.I18n);

    PageContextMenu.include(BH.Modules.Url);

    function PageContextMenu(options) {
      if (options == null) {
        options = {};
      }
      if (options.chrome == null) {
        throw "Chrome API not set";
      }
      if (options.tracker == null) {
        throw "Tracker not set";
      }
      this.chromeAPI = options.chrome;
      this.tracker = options.tracker;
      this.id = 'better_history_page_context_menu';
    }

    PageContextMenu.prototype.create = function() {
      var _this = this;
      this.menu = this.chromeAPI.contextMenus.create({
        title: this.t('visits_to_domain', ['domain']),
        contexts: ['page'],
        id: this.id
      });
      return this.chromeAPI.contextMenus.onClicked.addListener(function(data) {
        return _this.onClick(data);
      });
    };

    PageContextMenu.prototype.onClick = function(data) {
      var domain, url, urlOptions;
      if (data.menuItemId === this.id) {
        urlOptions = {
          absolute: true
        };
        url = (domain = this.getDomain(data.pageUrl)) ? this.urlFor('search', domain, urlOptions) : "chrome://history/#search";
        this.tracker.contextMenuClick();
        return this.chromeAPI.tabs.create({
          url: url
        });
      }
    };

    PageContextMenu.prototype.updateTitleDomain = function(tab) {
      var domain;
      if (tab == null) {
        tab = {};
      }
      if (domain = this.getDomain(tab.url)) {
        return this.chromeAPI.contextMenus.update(this.menu, {
          title: this.t('visits_to_domain', [domain])
        });
      }
    };

    PageContextMenu.prototype.listenToTabs = function() {
      var _this = this;
      this.chromeAPI.tabs.onActivated.addListener(function(tabInfo) {
        if (_this.menu) {
          return _this.onTabSelectionChanged(tabInfo.tabId);
        }
      });
      return this.chromeAPI.tabs.onUpdated.addListener(function(tabId, changedInfo, tab) {
        if (_this.menu) {
          return _this.onTabUpdated(tab);
        }
      });
    };

    PageContextMenu.prototype.onTabSelectionChanged = function(tabId) {
      var _this = this;
      return this.chromeAPI.tabs.get(tabId, function(tab) {
        return _this.updateTitleDomain(tab);
      });
    };

    PageContextMenu.prototype.onTabUpdated = function(tab) {
      if (tab != null ? tab.selected : void 0) {
        return this.updateTitleDomain(tab);
      }
    };

    PageContextMenu.prototype.remove = function() {
      this.chromeAPI.contextMenus.remove(this.menu);
      return delete this.menu;
    };

    PageContextMenu.prototype.getDomain = function(url) {
      var match;
      if (url == null) {
        url = '';
      }
      match = url.match(/\w+:\/\/(.*?)\//);
      if (match != null) {
        return match[1].replace('www.', '');
      } else {
        return false;
      }
    };

    return PageContextMenu;

  })(BH.Base);

}).call(this);
