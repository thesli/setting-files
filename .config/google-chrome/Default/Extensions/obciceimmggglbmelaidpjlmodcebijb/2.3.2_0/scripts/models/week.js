// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Models.Week = (function(_super) {

    __extends(Week, _super);

    function Week() {
      return Week.__super__.constructor.apply(this, arguments);
    }

    Week.include(BH.Modules.I18n);

    Week.include(BH.Modules.Url);

    Week.prototype.initialize = function(attrs, options) {
      this.chromeAPI = chrome;
      this.settings = options.settings;
      return this.set({
        id: this.get('date').id()
      });
    };

    Week.prototype.toHistory = function() {
      return {
        startDate: this.get('date'),
        endDate: moment(this.get('date')).add('days', 6)
      };
    };

    Week.prototype.toTemplate = function() {
      var copy, day, days;
      days = (function() {
        var _i, _len, _ref, _results;
        _ref = this.inflateDays();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          day = _ref[_i];
          _results.push({
            day: moment(day.id()).lang('en').format('dddd'),
            title: day.format('dddd'),
            inFuture: moment() < day,
            url: this.urlFor('day', day.id())
          });
        }
        return _results;
      }).call(this);
      copy = {
        shortTitle: this.get('date').format('L'),
        url: this.urlFor('week', this.id),
        title: this.t('date_week_label', [this.get('date').format('LL')])
      };
      return _.extend(copy, this.toJSON(), {
        days: days
      });
    };

    Week.prototype.inflateDays = function() {
      var days, i;
      days = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 6; i = ++_i) {
          _results.push(moment(this.get('date')).add('days', i));
        }
        return _results;
      }).call(this);
      if (this.settings.get('weekDayOrder') === 'descending') {
        days.reverse();
      }
      return days;
    };

    return Week;

  })(Backbone.Model);

}).call(this);
