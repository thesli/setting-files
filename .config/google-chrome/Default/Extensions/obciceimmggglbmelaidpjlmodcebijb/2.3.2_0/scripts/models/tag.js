// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Models.Tag = (function(_super) {

    __extends(Tag, _super);

    function Tag() {
      return Tag.__super__.constructor.apply(this, arguments);
    }

    Tag.prototype.initialize = function() {
      return this.on('sync', this.sync);
    };

    Tag.prototype.validate = function(attrs, options) {
      var name;
      name = attrs.name.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      if (name.length === 0) {
        return "tag is empty";
      }
      if (name.match(/[\"\'\~\,\.\|\(\)\{\}\[\]\;\:\<\>\^\*\%\^]/)) {
        return "tag contains special characters";
      }
    };

    Tag.prototype.fetch = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return persistence.tag().fetchTagSites(this.get('name'), function(sites) {
        return persistence.tag().fetchSharedTag(_this.get('name'), function(url) {
          _this.set({
            sites: sites,
            url: url
          });
          return callback();
        });
      });
    };

    Tag.prototype.destroy = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return persistence.tag().removeTag(this.get('name'), function() {
        _this.trigger('sync', {
          operation: 'destroy'
        });
        _this.set({
          sites: []
        });
        chrome.runtime.sendMessage({
          action: 'calculate hash'
        });
        return callback();
      });
    };

    Tag.prototype.removeSite = function(url, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return persistence.tag().removeSiteFromTag(url, this.get('name'), function(sites) {
        _this.trigger('sync', {
          operation: 'modify',
          site: _.where(_this.get('sites'), {
            url: url
          })[0]
        });
        _this.set({
          sites: sites
        });
        chrome.runtime.sendMessage({
          action: 'calculate hash'
        });
        return callback();
      });
    };

    Tag.prototype.renameTag = function(name, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return persistence.tag().renameTag(this.get('name'), name, function() {
        _this.trigger('sync', {
          operation: 'rename',
          newName: name,
          oldName: _this.get('name')
        });
        _this.set({
          name: name
        });
        chrome.runtime.sendMessage({
          action: 'calculate hash'
        });
        return callback();
      });
    };

    Tag.prototype.share = function(callbacks) {
      var index, json,
        _this = this;
      index = 1;
      json = this.toJSON();
      return _.each(json.sites, function(site, i) {
        return BH.Lib.ImageData.base64("chrome://favicon/" + site.url, function(data) {
          json.sites[i].image = data;
          if (index !== json.sites.length) {
            return index++;
          } else {
            return persistence.remote().share(json, {
              success: function(data) {
                persistence.tag().shareTag(_this.get('name'), data.url);
                return callbacks.success(data);
              },
              error: function() {
                return callbacks.error();
              }
            });
          }
        });
      });
    };

    Tag.prototype.sync = function(options) {
      var site;
      if (user.isLoggedIn()) {
        switch (options.operation) {
          case 'destroy':
            return persistence.remote().deleteTag(this.get('name'));
          case 'rename':
            return persistence.remote().renameTag(options.oldName, options.newName);
          case 'modify':
            site = options.site;
            return persistence.tag().fetchSiteTags(site.url, function(tags) {
              site.tags = tags;
              return persistence.remote().updateSite(site);
            });
        }
      }
    };

    return Tag;

  })(Backbone.Model);

}).call(this);
