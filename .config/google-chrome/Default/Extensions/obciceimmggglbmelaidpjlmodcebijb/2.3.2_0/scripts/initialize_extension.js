// Generated by CoffeeScript 1.6.1
(function() {
  var load;

  window.apiHost = 'api.better-history.com';

  window.siteHost = 'www.better-history.com';

  window.env = 'prod';

  window.errorTracker = new BH.Trackers.ErrorTracker(Honeybadger);

  window.analyticsTracker = new BH.Trackers.AnalyticsTracker(_gaq);

  load = function() {
    var mailingList, settings, tagFeature,
      _this = this;
    analyticsTracker.historyOpen();
    window.syncStore = new BH.Lib.SyncStore({
      chrome: chrome,
      tracker: analyticsTracker
    });
    syncStore.get('authId', function(data) {
      if (data == null) {
        data = {};
      }
      if (data.authId != null) {
        return $('body').addClass('logged_in');
      }
    });
    new BH.Lib.DateI18n().configure();
    window.tagState = new Backbone.Model({
      readOnly: false,
      syncing: false
    });
    tagState.on('change:syncing', function() {
      if (tagState.get('syncing') === true) {
        return $('body').addClass('syncing');
      } else {
        return $('body').removeClass('syncing');
      }
    });
    window.user = new BH.Models.User({});
    window.user.fetch();
    window.user.on('change', function() {
      if (this.get('authId')) {
        return this.trigger('login');
      }
    });
    window.user.on('logout', function() {
      var googleUserInfo;
      googleUserInfo = new BH.Lib.GoogleUserInfo();
      return googleUserInfo.revoke();
    });
    window.user.on('login', function() {
      var syncer;
      syncer = new BH.Lib.Syncer();
      return syncer.updateIfNeeded(function() {
        return tagState.trigger('synced');
      });
    });
    settings = new BH.Models.Settings({});
    window.state = new BH.Models.State({}, {
      settings: settings
    });
    window.persistence = new BH.Init.Persistence({
      localStore: new BH.Lib.LocalStore({
        chrome: chrome,
        tracker: analyticsTracker
      }),
      syncStore: new BH.Lib.SyncStore({
        chrome: chrome,
        tracker: analyticsTracker
      }),
      ajax: $.ajax,
      state: state
    });
    settings.fetch({
      success: function() {
        return state.fetch({
          success: function() {
            state.updateRoute();
            window.router = new BH.Router({
              settings: settings,
              state: state,
              tracker: analyticsTracker
            });
            return Backbone.history.start();
          }
        });
      }
    });
    mailingList = new BH.Init.MailingList({
      syncStore: syncStore
    });
    mailingList.prompt(function() {
      new BH.Views.MailingListView().open();
      return analyticsTracker.mailingListPrompt();
    });
    tagFeature = new BH.Init.TagFeature({
      syncStore: syncStore
    });
    return tagFeature.announce(function() {
      return $('body').addClass('new_tags');
    });
  };

  if (env === 'prod') {
    try {
      load();
    } catch (e) {
      errorTracker.report(e);
    }
  } else {
    load();
  }

}).call(this);
