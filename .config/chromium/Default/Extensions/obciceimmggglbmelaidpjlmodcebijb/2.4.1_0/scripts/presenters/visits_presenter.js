//@ sourceMappingURL=visits_presenter.map
// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Presenters.VisitsPresenter = (function(_super) {

    __extends(VisitsPresenter, _super);

    function VisitsPresenter(collection) {
      this.collection = collection;
    }

    VisitsPresenter.prototype.visits = function(start, end) {
      var i, model, presenter, visits, _i, _j, _len, _ref, _ref1;
      visits = [];
      if ((start != null) && (end != null)) {
        for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
          if (((_ref = this.collection.models) != null ? _ref[i] : void 0) != null) {
            presenter = new BH.Presenters.VisitPresenter(this.collection.models[i]);
            visits.push(presenter.visit());
          }
        }
      } else {
        _ref1 = this.collection.models;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          model = _ref1[_j];
          if (model.get('isGrouped')) {
            presenter = new BH.Presenters.GroupedVisitPresenter(model);
            visits.push(presenter.groupedVisit());
          } else {
            presenter = new BH.Presenters.VisitPresenter(model);
            visits.push(presenter.visit());
          }
        }
      }
      return {
        visits: visits
      };
    };

    return VisitsPresenter;

  })(BH.Presenters.Base);

}).call(this);
