// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.SearchResultsView = (function(_super) {

    __extends(SearchResultsView, _super);

    function SearchResultsView() {
      return SearchResultsView.__super__.constructor.apply(this, arguments);
    }

    SearchResultsView.include(BH.Modules.I18n);

    SearchResultsView.prototype.template = BH.Templates['search_results'];

    SearchResultsView.prototype.events = {
      'click .delete_visit': 'deleteClicked'
    };

    SearchResultsView.prototype.render = function() {
      var end, html, presenter, properties, start, _ref;
      _ref = BH.Lib.Pagination.calculateBounds(this.options.page), start = _ref[0], end = _ref[1];
      presenter = new BH.Presenters.SearchHistoryPresenter(this.collection.toJSON(), this.options.query);
      properties = _.extend(this.getI18nValues(), {
        visits: presenter.history(start, end)
      });
      html = Mustache.to_html(this.template, properties);
      this.$el.html(html);
      return this;
    };

    SearchResultsView.prototype.insertTags = function() {
      return persistence.tag().cached(function(operations) {
        return $('.site').each(function() {
          var $el, activeTagsView, tags;
          $el = $(this);
          tags = operations.siteTags($el.attr('href'));
          activeTagsView = new BH.Views.ActiveTagsView({
            model: new BH.Models.Site({
              tags: tags
            }),
            editable: false
          });
          return $el.find('.active_tags').html(activeTagsView.render().el);
        });
      });
    };

    SearchResultsView.prototype.attachDragging = function() {
      var dragAndTagView;
      dragAndTagView = new BH.Views.DragAndTagView({
        model: this.model
      });
      dragAndTagView.render();
      return dragAndTagView.on('site:change', function(site, $el) {
        var activeTagsView;
        activeTagsView = new BH.Views.ActiveTagsView({
          model: new BH.Models.Site(site),
          editable: false
        });
        return $el.find('.active_tags').html(activeTagsView.render().el);
      });
    };

    SearchResultsView.prototype.deleteClicked = function(ev) {
      var $el, url,
        _this = this;
      ev.preventDefault();
      $el = $(ev.currentTarget);
      url = $el.data('url');
      return new BH.Lib.SearchHistory().deleteUrl(url, function() {
        $el.parents('.visit').remove();
        return _this.collection.remove(_this.collection.where({
          url: url
        }));
      });
    };

    SearchResultsView.prototype.getI18nValues = function() {
      return this.t(['no_visits_found']);
    };

    return SearchResultsView;

  })(Backbone.View);

}).call(this);
