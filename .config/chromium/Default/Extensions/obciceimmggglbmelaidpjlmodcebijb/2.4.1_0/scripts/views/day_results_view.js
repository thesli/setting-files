// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.DayResultsView = (function(_super) {

    __extends(DayResultsView, _super);

    function DayResultsView() {
      return DayResultsView.__super__.constructor.apply(this, arguments);
    }

    DayResultsView.include(BH.Modules.I18n);

    DayResultsView.prototype.template = BH.Templates['day_results'];

    DayResultsView.prototype.events = {
      'click .delete_visit': 'deleteVisitClicked',
      'click .delete_grouped_visit': 'deleteGroupedVisitClicked',
      'click .delete_interval': 'deleteIntervalClicked',
      'click .show_visits': 'toggleGroupedVisitsClicked',
      'click .hide_visits': 'toggleGroupedVisitsClicked',
      'click .visit > a': 'visitClicked'
    };

    DayResultsView.prototype.initialize = function() {
      return this.chromeAPI = chrome;
    };

    DayResultsView.prototype.render = function() {
      var html, presenter, properties;
      presenter = new BH.Presenters.DayHistoryPresenter(this.collection.toJSON());
      properties = _.extend(this.getI18nValues(), {
        history: presenter.history(),
        readOnly: state.get('readOnly')
      });
      html = Mustache.to_html(this.template, properties);
      this.$el.html(html);
      return this;
    };

    DayResultsView.prototype.insertTags = function() {
      return persistence.tag().cached(function(operations) {
        var _this = this;
        $('.site').each(function() {
          var $el, activeTagsView, tags;
          $el = $(this);
          tags = operations.siteTags($el.attr('href'));
          if (tags.length > 0) {
            activeTagsView = new BH.Views.ActiveTagsView({
              model: new BH.Models.Site({
                tags: tags
              }),
              editable: false
            });
            return $el.find('.active_tags').html(activeTagsView.render().el);
          }
        });
        return $('.grouped_sites').each(function(i, siteEl) {
          var $el, activeTagsView, sharedTags, urls;
          $el = $(siteEl);
          urls = [];
          $el.find('a.site').each(function() {
            return urls.push($(this).attr('href'));
          });
          sharedTags = operations.sitesTags(urls);
          activeTagsView = new BH.Views.ActiveTagsView({
            model: new BH.Models.Site({
              tags: sharedTags
            }),
            editable: false
          });
          return $el.find('.active_tags').eq(0).html(activeTagsView.render().el);
        });
      });
    };

    DayResultsView.prototype.attachDragging = function() {
      var dragAndTagView;
      dragAndTagView = new BH.Views.DragAndTagView({
        collection: this.collection
      });
      dragAndTagView.render();
      dragAndTagView.on('site:change', function(site, $el) {
        var activeTagsView;
        activeTagsView = new BH.Views.ActiveTagsView({
          model: new BH.Models.Site(site),
          editable: false
        });
        return $el.find('.active_tags').html(activeTagsView.render().el);
      });
      return dragAndTagView.on('sites:change', function(site, $el) {
        var $activeTags, activeTagsView;
        activeTagsView = new BH.Views.ActiveTagsView({
          model: new BH.Models.Site(site),
          editable: false
        });
        $activeTags = $el.children('.sites').find('.active_tags');
        return $activeTags.html(activeTagsView.render().el);
      });
    };

    DayResultsView.prototype.visitClicked = function(ev) {
      if ($(ev.target).hasClass('search_domain')) {
        ev.preventDefault();
        return router.navigate($(ev.target).attr('href'), {
          trigger: true
        });
      }
    };

    DayResultsView.prototype.deleteVisitClicked = function(ev) {
      var $el;
      ev.preventDefault();
      $el = $(ev.currentTarget);
      analyticsTracker.visitDeletion();
      return new BH.Chrome.History().deleteUrl($el.data('url'), function() {
        return $el.parent('.visit').remove();
      });
    };

    DayResultsView.prototype.deleteGroupedVisitClicked = function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      analyticsTracker.groupedVisitsDeletion();
      $(ev.currentTarget).siblings('.visits').children().each(function(i, visit) {
        return $(visit).find('.delete_visit').trigger('click');
      });
      return $(ev.currentTarget).parents('.visit').remove();
    };

    DayResultsView.prototype.deleteIntervalClicked = function(ev) {
      var visitElements;
      ev.preventDefault();
      analyticsTracker.timeIntervalDeletion();
      visitElements = $(ev.currentTarget).parents('.interval').children('.visits').children();
      return $(visitElements).each(function(i, visit) {
        return setTimeout(function() {
          return $(visit).children('.delete').trigger('click');
        }, i * 10);
      });
    };

    DayResultsView.prototype.toggleGroupedVisitsClicked = function(ev) {
      ev.preventDefault();
      return $(ev.currentTarget).parents('.visit').toggleClass('expanded');
    };

    DayResultsView.prototype.getI18nValues = function() {
      return this.t(['prompt_delete_button', 'delete_time_interval_button', 'no_visits_found', 'expand_button', 'collapse_button', 'search_by_domain']);
    };

    return DayResultsView;

  })(Backbone.View);

}).call(this);
