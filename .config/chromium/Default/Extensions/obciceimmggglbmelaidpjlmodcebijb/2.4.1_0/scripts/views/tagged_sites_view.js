// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BH.Views.TaggedSitesView = (function(_super) {

    __extends(TaggedSitesView, _super);

    function TaggedSitesView() {
      return TaggedSitesView.__super__.constructor.apply(this, arguments);
    }

    TaggedSitesView.include(BH.Modules.I18n);

    TaggedSitesView.prototype.className = 'tagged_sites';

    TaggedSitesView.prototype.template = BH.Templates['tagged_sites'];

    TaggedSitesView.prototype.events = {
      'click .delete': 'deleteClicked'
    };

    TaggedSitesView.prototype.initialize = function() {
      return this.chromeAPI = chrome;
    };

    TaggedSitesView.prototype.render = function() {
      var html, presenter, properties;
      presenter = new BH.Presenters.TagPresenter(this.model);
      properties = _.extend(presenter.sites(), this.getI18nValues(), tagState.toJSON());
      html = Mustache.to_html(this.template, properties);
      this.$el.html(html);
      return this;
    };

    TaggedSitesView.prototype.insertTags = function() {
      var currentTag;
      currentTag = this.model.get('name');
      return persistence.tag().cached(function(operations) {
        return $('.site').each(function() {
          var $el, activeTagsView, tags;
          $el = $(this);
          tags = operations.siteTags($el.attr('href'));
          if (tags.length > 0) {
            activeTagsView = new BH.Views.ActiveTagsView({
              model: new BH.Models.Site({
                tags: _.without(tags, currentTag)
              }),
              editable: false
            });
            return $el.find('.active_tags').html(activeTagsView.render().el);
          }
        });
      });
    };

    TaggedSitesView.prototype.attachDragging = function() {
      var dragAndTagView;
      dragAndTagView = new BH.Views.DragAndTagView({
        model: this.model,
        excludeTag: true
      });
      dragAndTagView.render();
      return dragAndTagView.on('site:change', function(site) {
        var $el, activeTagsView;
        $el = $(".visit[data-url='" + site.url + "']");
        if (site.tags.indexOf(this.model.get('name')) === -1) {
          return $el.remove();
        } else {
          site.tags = _.without(site.tags, this.model.get('name'));
          activeTagsView = new BH.Views.ActiveTagsView({
            model: new BH.Models.Site(site),
            editable: false
          });
          return $el.find('.active_tags').html(activeTagsView.render().el);
        }
      });
    };

    TaggedSitesView.prototype.deleteClicked = function(ev) {
      var $el;
      ev.preventDefault();
      $el = $(ev.currentTarget);
      this.model.removeSite($el.attr('href'));
      this.model.unset('url');
      return $el.parents('.visit').remove();
    };

    TaggedSitesView.prototype.getI18nValues = function() {
      return this.t(['no_tagged_sites_found']);
    };

    return TaggedSitesView;

  })(BH.Views.MainView);

}).call(this);
